{
  "address": "0x638ec062688d3b1061Cb2F1f4c0e384E8a8974F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldRate",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "YieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "YieldDurationUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkpointOtherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yieldAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "eligibleCurrentVeUNO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eligibleVeUnoBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "storedEndTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fractionParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield0",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "greylist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_emittedToken",
          "type": "address"
        },
        {
          "internalType": "contract IVotingEscrow",
          "name": "_veUNO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastRewardClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeYieldApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardNotifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_yieldCollectionPaused",
          "type": "bool"
        }
      ],
      "name": "setPauses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTimelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldDuration",
          "type": "uint256"
        }
      ],
      "name": "setYieldDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRate0",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSync",
          "type": "bool"
        }
      ],
      "name": "setYieldRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "toggleGreylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_notifier",
          "type": "address"
        }
      ],
      "name": "toggleRewardNotifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVeUNOParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVeUNOSupplyStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIsInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVeUNOCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVeUNOEndpointCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userYieldPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veUNO",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCollectionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerVeUNO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerVeUNOStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yields",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e93c920a01b2505fdc898dba77c6a84081b463ccde8d7e6fa7807c3a58f60c4",
  "receipt": {
    "to": null,
    "from": "0xB4828FBf7753Ade73B608604690128e1FD1e9d3B",
    "contractAddress": "0x638ec062688d3b1061Cb2F1f4c0e384E8a8974F4",
    "transactionIndex": 70,
    "gasUsed": "1705189",
    "logsBloom": "0x
    "blockHash": "0x3f4e678690e576cc37f843023a0d5b559ee654822f13478cf77cb473fb509c2e",
    "transactionHash": "0x4e93c920a01b2505fdc898dba77c6a84081b463ccde8d7e6fa7807c3a58f60c4",
    "logs": [],
    "blockNumber": 5114558,
    "cumulativeGasUsed": "14480650",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ffcafb6737a44618830fadbcabd1d1da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"YieldDurationUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkpointOtherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"eligibleCurrentVeUNO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligibleVeUnoBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storedEndTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fractionParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield0\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_emittedToken\",\"type\":\"address\"},{\"internalType\":\"contract IVotingEscrow\",\"name\":\"_veUNO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeYieldApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardNotifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_yieldCollectionPaused\",\"type\":\"bool\"}],\"name\":\"setPauses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTimelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldDuration\",\"type\":\"uint256\"}],\"name\":\"setYieldDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate0\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSync\",\"type\":\"bool\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"toggleGreylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_notifier\",\"type\":\"address\"}],\"name\":\"toggleRewardNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVeUNOParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVeUNOSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVeUNOCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVeUNOEndpointCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userYieldPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veUNO\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerVeUNO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerVeUNOStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/VeUnoDaoYieldDistributor.sol\":\"VeUnoDaoYieldDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/access/OwnedUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ncontract OwnedUpgradeable {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    function __Owned_init(address _owner) internal {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x9d9c1736ab204fd70051e885c6b31671f6817727a7614e7b744b0eaab3e38266\",\"license\":\"MIT\"},\"contracts/apps/VeUnoDaoYieldDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n// Originally inspired by Synthetix.io, but heavily modified by the UNO team\\n// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {OwnedUpgradeable} from \\\"../access/OwnedUpgradeable.sol\\\";\\nimport {IVotingEscrow} from \\\"../interfaces/dao/IVotingEscrow.sol\\\";\\n\\ncontract VeUnoDaoYieldDistributor is OwnedUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    // Constant for price precision\\n    uint256 public constant PRICE_PRECISION = 1e6;\\n\\n    // Stores last reward time of staker\\n    mapping(address => uint256) public lastRewardClaimTime;\\n    // Vote escrow contract, used for voting power\\n    IVotingEscrow public veUNO;\\n    // Reward token which staker earns for staking Uno\\n    IERC20 public emittedToken;\\n    // Yield and period related\\n    uint256 public periodFinish;\\n    uint256 public lastUpdateTime;\\n    uint256 public yieldRate;\\n    uint256 public yieldDuration;\\n    // Yield tracking\\n    uint256 public yieldPerVeUNOStored;\\n    mapping(address => uint256) public userYieldPerTokenPaid;\\n    mapping(address => uint256) public yields;\\n    // veUNO tracking\\n    uint256 public totalVeUNOParticipating;\\n    uint256 public totalVeUNOSupplyStored;\\n    mapping(address => uint256) public userVeUNOCheckpointed;\\n    mapping(address => uint256) public userVeUNOEndpointCheckpointed;\\n    mapping(address => bool) public userIsInitialized;\\n    // Greylists\\n    mapping(address => bool) public greylist;\\n    // Admin booleans for emergencies\\n    bool public yieldCollectionPaused; // For emergencies, by default \\\"False\\\"\\n    // Used to change secure states\\n    address public timelock;\\n    // Stores user's flag for reward apy update\\n    mapping(address => bool) public rewardNotifiers;\\n\\n    event RewardAdded(uint256 reward, uint256 yieldRate);\\n    event YieldCollected(\\n        address indexed user,\\n        uint256 yieldAmount,\\n        address token\\n    );\\n    event YieldDurationUpdated(uint256 newDuration);\\n    event RecoveredERC20(address token, uint256 amount);\\n\\n    modifier onlyByOwnGov() {\\n        require(\\n            msg.sender == owner || msg.sender == timelock,\\n            \\\"VeUnoYD: !O/T\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notYieldCollectionPaused() {\\n        require(!yieldCollectionPaused, \\\"VeUnoYD: YCP\\\");\\n        _;\\n    }\\n\\n    modifier checkpointUser(address _account) {\\n        _checkpointUser(_account);\\n        _;\\n    }\\n\\n    function initialize(IERC20 _emittedToken, IVotingEscrow _veUNO, address _timelock, address _owner) external initializer {\\n        emittedToken = _emittedToken;\\n        veUNO = _veUNO;\\n        timelock = _timelock;\\n        lastUpdateTime = block.timestamp;\\n        rewardNotifiers[msg.sender] = true;\\n        yieldDuration = 604800; // 7 * 86400  (7 days)\\n        __Owned_init(_owner);\\n    }\\n\\n    function sync() public {\\n        // Update the total veUNO supply\\n        yieldPerVeUNOStored = yieldPerVeUNO();\\n        totalVeUNOSupplyStored = veUNO.totalSupply();\\n        lastUpdateTime = lastTimeYieldApplicable();\\n    }\\n\\n    // Only positions with locked veUNO can accrue yield. Otherwise, expired-locked veUNO\\n    function eligibleCurrentVeUNO(\\n        address _account\\n    )\\n        public\\n        view\\n        returns (uint256 eligibleVeUnoBal, uint256 storedEndTimestamp)\\n    {\\n        uint256 currVeUnoBal = veUNO.balanceOf(_account);\\n\\n        // Stored is used to prevent abuse\\n        storedEndTimestamp = userVeUNOEndpointCheckpointed[_account];\\n\\n        // Only unexpired veUNO should be eligible\\n        if (\\n            storedEndTimestamp != 0 && (block.timestamp >= storedEndTimestamp)\\n        ) {\\n            eligibleVeUnoBal = 0;\\n        } else if (block.timestamp >= storedEndTimestamp) {\\n            eligibleVeUnoBal = 0;\\n        } else {\\n            eligibleVeUnoBal = currVeUnoBal;\\n        }\\n    }\\n\\n    function lastTimeYieldApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish; // return min value\\n    }\\n\\n    function yieldPerVeUNO() public view returns (uint256 yield) {\\n        if (totalVeUNOSupplyStored == 0) {\\n            yield = yieldPerVeUNOStored;\\n        } else {\\n            yield =\\n                yieldPerVeUNOStored +\\n                (((lastTimeYieldApplicable() - lastUpdateTime) *\\n                    yieldRate *\\n                    1e18) / totalVeUNOSupplyStored);\\n        }\\n    }\\n\\n    function earned(\\n        address _account\\n    ) public view returns (uint256 yieldAmount) {\\n        // Uninitialized users should not earn anything yet\\n        if (!userIsInitialized[_account]) return 0;\\n\\n        // Get eligible veUNO balances\\n        (\\n            uint256 eligibleCurrentVeUno,\\n            uint256 endTimestamp\\n        ) = eligibleCurrentVeUNO(_account);\\n\\n        // If your veUNO is unlocked\\n        uint256 eligibleTimeFraction = PRICE_PRECISION;\\n        if (eligibleCurrentVeUno == 0) {\\n            // And you already claimed after expiration\\n            if (lastRewardClaimTime[_account] >= endTimestamp) {\\n                // You get NOTHING. You LOSE. Good DAY ser!\\n                return 0;\\n            }\\n            // You haven't claimed yet\\n            else {\\n                uint256 eligibleTime = endTimestamp -\\n                    lastRewardClaimTime[_account];\\n                uint256 totalTime = block.timestamp -\\n                    lastRewardClaimTime[_account];\\n                eligibleTimeFraction =\\n                    (eligibleTime * PRICE_PRECISION) /\\n                    totalTime;\\n            }\\n        }\\n\\n        // If the amount of veUNO increased, only pay off based on the old balance\\n        // Otherwise, take the midpoint\\n        uint256 veUnoBalanceToUse;\\n        {\\n            uint256 oldVeUnoBalance = userVeUNOCheckpointed[_account];\\n            if (eligibleCurrentVeUno > oldVeUnoBalance) {\\n                veUnoBalanceToUse = oldVeUnoBalance;\\n            } else {\\n                veUnoBalanceToUse =\\n                    (eligibleCurrentVeUno + oldVeUnoBalance) /\\n                    2;\\n            }\\n        }\\n\\n        yieldAmount =\\n            yields[_account] +\\n            ((veUnoBalanceToUse *\\n                (yieldPerVeUNO() - userYieldPerTokenPaid[_account]) *\\n                eligibleTimeFraction) / (PRICE_PRECISION * 1e18));\\n    }\\n\\n    // Anyone can checkpoint another user\\n    function checkpointOtherUser(address _user) external {\\n        _checkpointUser(_user);\\n    }\\n\\n    // Checkpoints the user\\n    function checkpoint() external {\\n        _checkpointUser(msg.sender);\\n    }\\n\\n    function getYield()\\n        external\\n        nonReentrant\\n        notYieldCollectionPaused\\n        checkpointUser(msg.sender)\\n        returns (uint256 yield0)\\n    {\\n        require(!greylist[msg.sender], \\\"VeUnoYD: GLU\\\");\\n\\n        yield0 = yields[msg.sender];\\n\\n        if (yield0 > 0) {\\n            yields[msg.sender] = 0;\\n            emittedToken.safeTransfer(msg.sender, yield0);\\n            emit YieldCollected(msg.sender, yield0, address(emittedToken));\\n        }\\n\\n        lastRewardClaimTime[msg.sender] = block.timestamp;\\n    }\\n\\n    function notifyRewardAmount(address _user, uint256 _amount) external {\\n        // Only whitelisted addresses can notify rewards\\n        require(rewardNotifiers[msg.sender], \\\"VeUnoYD: !Notifier\\\");\\n\\n        // Handle the transfer of emission tokens via `transferFrom` to reduce the number\\n        // of transactions required and ensure correctness of the emission amount\\n        emittedToken.safeTransferFrom(_user, address(this), _amount);\\n\\n        // Update some values beforehand\\n        sync();\\n\\n        // Update the new yieldRate\\n        if (block.timestamp >= periodFinish) {\\n            yieldRate = _amount / yieldDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * yieldRate;\\n            yieldRate = (_amount + leftover) / yieldDuration;\\n        }\\n\\n        // Update duration-related info\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + yieldDuration;\\n\\n        emit RewardAdded(_amount, yieldRate);\\n    }\\n\\n    function fractionParticipating() external view returns (uint256) {\\n        return\\n            (totalVeUNOParticipating * PRICE_PRECISION) /\\n            totalVeUNOSupplyStored;\\n    }\\n\\n    function getYieldForDuration() external view returns (uint256) {\\n        return yieldRate * yieldDuration;\\n    }\\n\\n    function _checkpointUser(address _account) internal {\\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\\n        sync();\\n\\n        // Calculate the earnings first\\n        _syncEarned(_account);\\n\\n        // Get the old and the new veUNO balances\\n        uint256 oldVeUnoBalance = userVeUNOCheckpointed[_account];\\n        uint256 newVeUnoBalance = veUNO.balanceOf(_account);\\n\\n        // Update the user's stored veUNO balance\\n        userVeUNOCheckpointed[_account] = newVeUnoBalance;\\n\\n        // Update the user's stored ending timestamp\\n        IVotingEscrow.LockedBalance memory userCurrentLockedInfo = veUNO.locked(\\n            _account\\n        );\\n        userVeUNOEndpointCheckpointed[_account] = userCurrentLockedInfo.end;\\n\\n        // Update the total amount participating\\n        if (newVeUnoBalance >= oldVeUnoBalance) {\\n            uint256 weightDiff = newVeUnoBalance - oldVeUnoBalance;\\n            totalVeUNOParticipating = totalVeUNOParticipating + weightDiff;\\n        } else {\\n            uint256 weightDiff = oldVeUnoBalance - newVeUnoBalance;\\n            totalVeUNOParticipating = totalVeUNOParticipating - weightDiff;\\n        }\\n\\n        // Mark the user as initialized\\n        if (!userIsInitialized[_account]) {\\n            userIsInitialized[_account] = true;\\n            lastRewardClaimTime[_account] = block.timestamp;\\n        }\\n    }\\n\\n    function _syncEarned(address _account) internal {\\n        if (_account != address(0)) {\\n            uint256 earned0 = earned(_account);\\n            yields[_account] = earned0;\\n            userYieldPerTokenPaid[_account] = yieldPerVeUNOStored;\\n        }\\n    }\\n\\n    // Added to support recovering LP Yield and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(\\n        IERC20 _token,\\n        uint256 _amount\\n    ) external onlyByOwnGov {\\n        // Only the owner address can receive the recovery withdrawal\\n        _token.safeTransfer(owner, _amount);\\n        emit RecoveredERC20(address(_token), _amount);\\n    }\\n\\n    function setYieldDuration(uint256 _yieldDuration) external onlyByOwnGov {\\n        require(block.timestamp > periodFinish, \\\"VeUnoYD: !PYPC\\\");\\n        yieldDuration = _yieldDuration;\\n        emit YieldDurationUpdated(_yieldDuration);\\n    }\\n\\n    function toggleGreylist(address _user) external onlyByOwnGov {\\n        greylist[_user] = !greylist[_user];\\n    }\\n\\n    function toggleRewardNotifier(address _notifier) external onlyByOwnGov {\\n        rewardNotifiers[_notifier] = !rewardNotifiers[_notifier];\\n    }\\n\\n    function setPauses(bool _yieldCollectionPaused) external onlyByOwnGov {\\n        yieldCollectionPaused = _yieldCollectionPaused;\\n    }\\n\\n    function setYieldRate(\\n        uint256 _newRate0,\\n        bool _isSync\\n    ) external onlyByOwnGov {\\n        yieldRate = _newRate0;\\n\\n        if (_isSync) {\\n            sync();\\n        }\\n    }\\n\\n    function setTimelock(address _newTimelock) external onlyByOwnGov {\\n        timelock = _newTimelock;\\n    }\\n}\\n\",\"keccak256\":\"0x9797e69646af013ac5900d3d4ddd85d2c0df4ab6199c584f045dc5e1902c4841\",\"license\":\"MIT\"},\"contracts/interfaces/dao/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    function get_last_user_slope(address _addr) external view returns (uint256);\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    // function balanceOf(address _addr, uint256 _t) external view returns (uint256);\\n    function balanceOf(address addr)external view returns (uint256);\\n\\n    // function totalSupply(uint256 _t) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n\\n    function locked (address arg0) external view returns ( LockedBalance memory );\\n\\n    function get_user_point_epoch(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function user_point_history__ts(address _addr, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x9105930166243c8ea15031504a050996aaef2697e69259d682a81dca0425bd26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611df9806100206000396000f3fe608060405234801561001057600080fd5b50600436106102e85760003560e01c80638da5cb5b11610191578063c8f33c91116100e3578063e9218ff611610097578063f8c8765e11610071578063f8c8765e14610616578063fc939bb114610629578063fff6cae91461063157600080fd5b8063e9218ff6146105da578063ebe2b12b146105ed578063eea4e903146105f657600080fd5b8063d15166ff116100c8578063d15166ff14610596578063d33219b4146105b9578063e172cf21146105d157600080fd5b8063c8f33c9114610584578063d0f533421461058d57600080fd5b80639f8a835a11610145578063b66503cf1161011f578063b66503cf14610556578063bdacb30314610569578063c2c4c5c11461057c57600080fd5b80639f8a835a14610516578063a875f47214610529578063ad1148cb1461054957600080fd5b806392ff86b61161017657806392ff86b6146104d1578063948e25a2146104f957806395082d251461050c57600080fd5b80638da5cb5b146104ab57806391519bda146104be57600080fd5b806342c92f6e1161024a5780636999ac93116101fe57806379ba5097116101d857806379ba5097146104885780637c262871146104905780638980f11f1461049857600080fd5b80636999ac931461044c5780636c430dbb1461045557806374ea0b981461047557600080fd5b806353a47bb71161022f57806353a47bb71461042857806356d9fff31461043b578063647f15ae1461044357600080fd5b806342c92f6e146103f557806350fe98ac1461040857600080fd5b806328aede0a116102a157806330f7bb381161028657806330f7bb38146103b657806331ca208c146103bf5780633328d976146103e257600080fd5b806328aede0a14610383578063299a6435146103ae57600080fd5b80631627540c116102d25780631627540c1461034657806319aec6d21461035b5780631e74e7ce1461036357600080fd5b80628cc262146102ed57806314b3053714610313575b600080fd5b6103006102fb366004611b73565b610639565b6040519081526020015b60405180910390f35b610336610321366004611b73565b60106020526000908152604090205460ff1681565b604051901515815260200161030a565b610359610354366004611b73565b6107e2565b005b6103006108c9565b610300610371366004611b73565b600f6020526000908152604090205481565b600354610396906001600160a01b031681565b6040516001600160a01b03909116815260200161030a565b6103006108e0565b610300600c5481565b6103366103cd366004611b73565b60116020526000908152604090205460ff1681565b6103596103f0366004611b73565b610944565b610359610403366004611b73565b6109d1565b610300610416366004611b73565b600b6020526000908152604090205481565b600154610396906001600160a01b031681565b610300610a5e565b61030060095481565b61030060075481565b610300610463366004611b73565b60026020526000908152604090205481565b610359610483366004611b90565b610a75565b610359610b5f565b610300610c5e565b6103596104a6366004611ba9565b610dea565b600054610396906001600160a01b031681565b6103596104cc366004611be3565b610eaf565b6104e46104df366004611b73565b610f2a565b6040805192835260208301919091520161030a565b610359610507366004611c13565b61100c565b610300620f424081565b610359610524366004611b73565b611083565b610300610537366004611b73565b600a6020526000908152604090205481565b6012546103369060ff1681565b610359610564366004611ba9565b61108f565b610359610577366004611b73565b6111bd565b610359611260565b61030060065481565b610300600d5481565b6103366105a4366004611b73565b60136020526000908152604090205460ff1681565b6012546103969061010090046001600160a01b031681565b61030060085481565b600454610396906001600160a01b031681565b61030060055481565b610300610604366004611b73565b600e6020526000908152604090205481565b610359610624366004611c30565b61126b565b610300611457565b610359611477565b6001600160a01b03811660009081526010602052604081205460ff1661066157506000919050565b60008061066d84610f2a565b9092509050620f42406000839003610712576001600160a01b03851660009081526002602052604090205482116106a957506000949350505050565b6001600160a01b0385166000908152600260205260408120546106cc9084611ca2565b6001600160a01b038716600090815260026020526040812054919250906106f39042611ca2565b905080610703620f424084611cb5565b61070d9190611ccc565b925050505b6001600160a01b0385166000908152600e60205260408120548085111561073b57809150610754565b60026107478287611cee565b6107519190611ccc565b91505b5061076a620f4240670de0b6b3a7640000611cb5565b6001600160a01b0387166000908152600a6020526040902054839061078d6108e0565b6107979190611ca2565b6107a19084611cb5565b6107ab9190611cb5565b6107b59190611ccc565b6001600160a01b0387166000908152600b60205260409020546107d89190611cee565b9695505050505050565b6000546001600160a01b031633146108675760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b60006008546007546108db9190611cb5565b905090565b6000600d546000036108f3575060095490565b600d54600754600654610904610a5e565b61090e9190611ca2565b6109189190611cb5565b61092a90670de0b6b3a7640000611cb5565b6109349190611ccc565b6009546108db9190611cee565b90565b6000546001600160a01b031633148061096c575060125461010090046001600160a01b031633145b6109a85760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6001600160a01b03166000908152601160205260409020805460ff19811660ff90911615179055565b6000546001600160a01b03163314806109f9575060125461010090046001600160a01b031633145b610a355760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6001600160a01b03166000908152601360205260409020805460ff19811660ff90911615179055565b60006005544210610a70575060055490565b504290565b6000546001600160a01b0316331480610a9d575060125461010090046001600160a01b031633145b610ad95760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6005544211610b2a5760405162461bcd60e51b815260206004820152600e60248201527f5665556e6f59443a202150595043000000000000000000000000000000000000604482015260640161085e565b60088190556040518181527fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f7906020016108be565b6001546001600160a01b03163314610bdf5760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e6572736869700000000000000000000000606482015260840161085e565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b6000610c68611519565b60125460ff1615610cbb5760405162461bcd60e51b815260206004820152600c60248201527f5665556e6f59443a205943500000000000000000000000000000000000000000604482015260640161085e565b33610cc58161159a565b3360009081526011602052604090205460ff1615610d255760405162461bcd60e51b815260206004820152600c60248201527f5665556e6f59443a20474c550000000000000000000000000000000000000000604482015260640161085e565b336000908152600b602052604090205491508115610dae57336000818152600b6020526040812055600454610d66916001600160a01b0390911690846117aa565b600454604080518481526001600160a01b03909216602083015233917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd910160405180910390a25b5033600090815260026020526040902042905561094160017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000546001600160a01b0316331480610e12575060125461010090046001600160a01b031633145b610e4e5760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b600054610e68906001600160a01b038481169116836117aa565b604080516001600160a01b0384168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b191015b60405180910390a15050565b6000546001600160a01b0316331480610ed7575060125461010090046001600160a01b031633145b610f135760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b60078290558015610f2657610f26611477565b5050565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283928392909116906370a0823190602401602060405180830381865afa158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb89190611d01565b6001600160a01b0385166000908152600f6020526040902054925090508115801590610fe45750814210155b15610ff25760009250611006565b8142106110025760009250611006565b8092505b50915091565b6000546001600160a01b0316331480611034575060125461010090046001600160a01b031633145b6110705760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6012805460ff1916911515919091179055565b61108c8161159a565b50565b3360009081526013602052604090205460ff166110ee5760405162461bcd60e51b815260206004820152601260248201527f5665556e6f59443a20214e6f7469666965720000000000000000000000000000604482015260640161085e565b600454611106906001600160a01b0316833084611823565b61110e611477565b600554421061112c576008546111249082611ccc565b60075561116e565b60004260055461113c9190611ca2565b905060006007548261114e9190611cb5565b60085490915061115e8285611cee565b6111689190611ccc565b60075550505b42600681905560085461118091611cee565b6005556007546040805183815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559101610ea3565b6000546001600160a01b03163314806111e5575060125461010090046001600160a01b031633145b6112215760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b601280546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b6112693361159a565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156112b65750825b905060008267ffffffffffffffff1660011480156112d35750303b155b9050811580156112e1575080155b15611318576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561136357845468ff00000000000000001916680100000000000000001785555b600480546001600160a01b03808c1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600380548b8416921691909117905560128054918916610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905542600655336000908152601360205260409020805460ff1916600117905562093a806008556114018661185c565b831561144c57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6000600d54620f4240600c5461146d9190611cb5565b6108db9190611ccc565b61147f6108e0565b600955600354604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd916004808201926020929091908290030181865afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115099190611d01565b600d55611514610a5e565b600655565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01611594576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6115a2611477565b6115ab81611913565b6001600160a01b038181166000818152600e60205260408082205460035491517f70a0823100000000000000000000000000000000000000000000000000000000815260048101949094529391929116906370a0823190602401602060405180830381865afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190611d01565b6001600160a01b038481166000818152600e602052604080822085905560035490517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526004810193909352939450929091169063cbf9fe5f906024016040805180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190611d1a565b6020808201516001600160a01b0387166000908152600f90925260409091205590508282106117325760006117198484611ca2565b905080600c546117299190611cee565b600c5550611753565b600061173e8385611ca2565b905080600c5461174e9190611ca2565b600c55505b6001600160a01b03841660009081526010602052604090205460ff166117a4576001600160a01b0384166000908152601060209081526040808320805460ff19166001179055600290915290204290555b50505050565b6040516001600160a01b0383811660248301526044820183905261181e91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061195c565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526117a49186918216906323b872dd906084016117d7565b6001600160a01b0381166118b25760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640161085e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91016108be565b6001600160a01b0381161561108c57600061192d82610639565b6001600160a01b0383166000908152600b6020908152604080832093909355600954600a909152919020555050565b60006119716001600160a01b038416836119d8565b905080516000141580156119965750808060200190518101906119949190611d77565b155b1561181e576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161085e565b60606119e6838360006119ef565b90505b92915050565b606081471015611a2d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161085e565b600080856001600160a01b03168486604051611a499190611d94565b60006040518083038185875af1925050503d8060008114611a86576040519150601f19603f3d011682016040523d82523d6000602084013e611a8b565b606091505b5091509150611a9b868383611aa7565b925050505b9392505050565b606082611abc57611ab782611b1c565b611aa0565b8151158015611ad357506001600160a01b0384163b155b15611b15576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161085e565b5080611aa0565b805115611b2c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116811461108c57600080fd5b600060208284031215611b8557600080fd5b8135611aa081611b5e565b600060208284031215611ba257600080fd5b5035919050565b60008060408385031215611bbc57600080fd5b8235611bc781611b5e565b946020939093013593505050565b801515811461108c57600080fd5b60008060408385031215611bf657600080fd5b823591506020830135611c0881611bd5565b809150509250929050565b600060208284031215611c2557600080fd5b8135611aa081611bd5565b60008060008060808587031215611c4657600080fd5b8435611c5181611b5e565b93506020850135611c6181611b5e565b92506040850135611c7181611b5e565b91506060850135611c8181611b5e565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b818103818111156119e9576119e9611c8c565b80820281158282048414176119e9576119e9611c8c565b600082611ce957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156119e9576119e9611c8c565b600060208284031215611d1357600080fd5b5051919050565b600060408284031215611d2c57600080fd5b6040516040810181811067ffffffffffffffff82111715611d5d57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208284031215611d8957600080fd5b8151611aa081611bd5565b6000825160005b81811015611db55760208186018101518583015201611d9b565b50600092019182525091905056fea2646970667358221220aa0901271356c34ec46dc1248c6057c12a86b54d00fa9671639497c33a2e85a864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e85760003560e01c80638da5cb5b11610191578063c8f33c91116100e3578063e9218ff611610097578063f8c8765e11610071578063f8c8765e14610616578063fc939bb114610629578063fff6cae91461063157600080fd5b8063e9218ff6146105da578063ebe2b12b146105ed578063eea4e903146105f657600080fd5b8063d15166ff116100c8578063d15166ff14610596578063d33219b4146105b9578063e172cf21146105d157600080fd5b8063c8f33c9114610584578063d0f533421461058d57600080fd5b80639f8a835a11610145578063b66503cf1161011f578063b66503cf14610556578063bdacb30314610569578063c2c4c5c11461057c57600080fd5b80639f8a835a14610516578063a875f47214610529578063ad1148cb1461054957600080fd5b806392ff86b61161017657806392ff86b6146104d1578063948e25a2146104f957806395082d251461050c57600080fd5b80638da5cb5b146104ab57806391519bda146104be57600080fd5b806342c92f6e1161024a5780636999ac93116101fe57806379ba5097116101d857806379ba5097146104885780637c262871146104905780638980f11f1461049857600080fd5b80636999ac931461044c5780636c430dbb1461045557806374ea0b981461047557600080fd5b806353a47bb71161022f57806353a47bb71461042857806356d9fff31461043b578063647f15ae1461044357600080fd5b806342c92f6e146103f557806350fe98ac1461040857600080fd5b806328aede0a116102a157806330f7bb381161028657806330f7bb38146103b657806331ca208c146103bf5780633328d976146103e257600080fd5b806328aede0a14610383578063299a6435146103ae57600080fd5b80631627540c116102d25780631627540c1461034657806319aec6d21461035b5780631e74e7ce1461036357600080fd5b80628cc262146102ed57806314b3053714610313575b600080fd5b6103006102fb366004611b73565b610639565b6040519081526020015b60405180910390f35b610336610321366004611b73565b60106020526000908152604090205460ff1681565b604051901515815260200161030a565b610359610354366004611b73565b6107e2565b005b6103006108c9565b610300610371366004611b73565b600f6020526000908152604090205481565b600354610396906001600160a01b031681565b6040516001600160a01b03909116815260200161030a565b6103006108e0565b610300600c5481565b6103366103cd366004611b73565b60116020526000908152604090205460ff1681565b6103596103f0366004611b73565b610944565b610359610403366004611b73565b6109d1565b610300610416366004611b73565b600b6020526000908152604090205481565b600154610396906001600160a01b031681565b610300610a5e565b61030060095481565b61030060075481565b610300610463366004611b73565b60026020526000908152604090205481565b610359610483366004611b90565b610a75565b610359610b5f565b610300610c5e565b6103596104a6366004611ba9565b610dea565b600054610396906001600160a01b031681565b6103596104cc366004611be3565b610eaf565b6104e46104df366004611b73565b610f2a565b6040805192835260208301919091520161030a565b610359610507366004611c13565b61100c565b610300620f424081565b610359610524366004611b73565b611083565b610300610537366004611b73565b600a6020526000908152604090205481565b6012546103369060ff1681565b610359610564366004611ba9565b61108f565b610359610577366004611b73565b6111bd565b610359611260565b61030060065481565b610300600d5481565b6103366105a4366004611b73565b60136020526000908152604090205460ff1681565b6012546103969061010090046001600160a01b031681565b61030060085481565b600454610396906001600160a01b031681565b61030060055481565b610300610604366004611b73565b600e6020526000908152604090205481565b610359610624366004611c30565b61126b565b610300611457565b610359611477565b6001600160a01b03811660009081526010602052604081205460ff1661066157506000919050565b60008061066d84610f2a565b9092509050620f42406000839003610712576001600160a01b03851660009081526002602052604090205482116106a957506000949350505050565b6001600160a01b0385166000908152600260205260408120546106cc9084611ca2565b6001600160a01b038716600090815260026020526040812054919250906106f39042611ca2565b905080610703620f424084611cb5565b61070d9190611ccc565b925050505b6001600160a01b0385166000908152600e60205260408120548085111561073b57809150610754565b60026107478287611cee565b6107519190611ccc565b91505b5061076a620f4240670de0b6b3a7640000611cb5565b6001600160a01b0387166000908152600a6020526040902054839061078d6108e0565b6107979190611ca2565b6107a19084611cb5565b6107ab9190611cb5565b6107b59190611ccc565b6001600160a01b0387166000908152600b60205260409020546107d89190611cee565b9695505050505050565b6000546001600160a01b031633146108675760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b60006008546007546108db9190611cb5565b905090565b6000600d546000036108f3575060095490565b600d54600754600654610904610a5e565b61090e9190611ca2565b6109189190611cb5565b61092a90670de0b6b3a7640000611cb5565b6109349190611ccc565b6009546108db9190611cee565b90565b6000546001600160a01b031633148061096c575060125461010090046001600160a01b031633145b6109a85760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6001600160a01b03166000908152601160205260409020805460ff19811660ff90911615179055565b6000546001600160a01b03163314806109f9575060125461010090046001600160a01b031633145b610a355760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6001600160a01b03166000908152601360205260409020805460ff19811660ff90911615179055565b60006005544210610a70575060055490565b504290565b6000546001600160a01b0316331480610a9d575060125461010090046001600160a01b031633145b610ad95760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6005544211610b2a5760405162461bcd60e51b815260206004820152600e60248201527f5665556e6f59443a202150595043000000000000000000000000000000000000604482015260640161085e565b60088190556040518181527fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f7906020016108be565b6001546001600160a01b03163314610bdf5760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e6572736869700000000000000000000000606482015260840161085e565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b6000610c68611519565b60125460ff1615610cbb5760405162461bcd60e51b815260206004820152600c60248201527f5665556e6f59443a205943500000000000000000000000000000000000000000604482015260640161085e565b33610cc58161159a565b3360009081526011602052604090205460ff1615610d255760405162461bcd60e51b815260206004820152600c60248201527f5665556e6f59443a20474c550000000000000000000000000000000000000000604482015260640161085e565b336000908152600b602052604090205491508115610dae57336000818152600b6020526040812055600454610d66916001600160a01b0390911690846117aa565b600454604080518481526001600160a01b03909216602083015233917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd910160405180910390a25b5033600090815260026020526040902042905561094160017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000546001600160a01b0316331480610e12575060125461010090046001600160a01b031633145b610e4e5760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b600054610e68906001600160a01b038481169116836117aa565b604080516001600160a01b0384168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b191015b60405180910390a15050565b6000546001600160a01b0316331480610ed7575060125461010090046001600160a01b031633145b610f135760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b60078290558015610f2657610f26611477565b5050565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283928392909116906370a0823190602401602060405180830381865afa158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb89190611d01565b6001600160a01b0385166000908152600f6020526040902054925090508115801590610fe45750814210155b15610ff25760009250611006565b8142106110025760009250611006565b8092505b50915091565b6000546001600160a01b0316331480611034575060125461010090046001600160a01b031633145b6110705760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b6012805460ff1916911515919091179055565b61108c8161159a565b50565b3360009081526013602052604090205460ff166110ee5760405162461bcd60e51b815260206004820152601260248201527f5665556e6f59443a20214e6f7469666965720000000000000000000000000000604482015260640161085e565b600454611106906001600160a01b0316833084611823565b61110e611477565b600554421061112c576008546111249082611ccc565b60075561116e565b60004260055461113c9190611ca2565b905060006007548261114e9190611cb5565b60085490915061115e8285611cee565b6111689190611ccc565b60075550505b42600681905560085461118091611cee565b6005556007546040805183815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559101610ea3565b6000546001600160a01b03163314806111e5575060125461010090046001600160a01b031633145b6112215760405162461bcd60e51b815260206004820152600d60248201526c1599555b9bd6510e880853cbd5609a1b604482015260640161085e565b601280546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b6112693361159a565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156112b65750825b905060008267ffffffffffffffff1660011480156112d35750303b155b9050811580156112e1575080155b15611318576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561136357845468ff00000000000000001916680100000000000000001785555b600480546001600160a01b03808c1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600380548b8416921691909117905560128054918916610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905542600655336000908152601360205260409020805460ff1916600117905562093a806008556114018661185c565b831561144c57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6000600d54620f4240600c5461146d9190611cb5565b6108db9190611ccc565b61147f6108e0565b600955600354604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd916004808201926020929091908290030181865afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115099190611d01565b600d55611514610a5e565b600655565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01611594576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6115a2611477565b6115ab81611913565b6001600160a01b038181166000818152600e60205260408082205460035491517f70a0823100000000000000000000000000000000000000000000000000000000815260048101949094529391929116906370a0823190602401602060405180830381865afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190611d01565b6001600160a01b038481166000818152600e602052604080822085905560035490517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526004810193909352939450929091169063cbf9fe5f906024016040805180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190611d1a565b6020808201516001600160a01b0387166000908152600f90925260409091205590508282106117325760006117198484611ca2565b905080600c546117299190611cee565b600c5550611753565b600061173e8385611ca2565b905080600c5461174e9190611ca2565b600c55505b6001600160a01b03841660009081526010602052604090205460ff166117a4576001600160a01b0384166000908152601060209081526040808320805460ff19166001179055600290915290204290555b50505050565b6040516001600160a01b0383811660248301526044820183905261181e91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061195c565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526117a49186918216906323b872dd906084016117d7565b6001600160a01b0381166118b25760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640161085e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91016108be565b6001600160a01b0381161561108c57600061192d82610639565b6001600160a01b0383166000908152600b6020908152604080832093909355600954600a909152919020555050565b60006119716001600160a01b038416836119d8565b905080516000141580156119965750808060200190518101906119949190611d77565b155b1561181e576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161085e565b60606119e6838360006119ef565b90505b92915050565b606081471015611a2d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161085e565b600080856001600160a01b03168486604051611a499190611d94565b60006040518083038185875af1925050503d8060008114611a86576040519150601f19603f3d011682016040523d82523d6000602084013e611a8b565b606091505b5091509150611a9b868383611aa7565b925050505b9392505050565b606082611abc57611ab782611b1c565b611aa0565b8151158015611ad357506001600160a01b0384163b155b15611b15576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161085e565b5080611aa0565b805115611b2c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116811461108c57600080fd5b600060208284031215611b8557600080fd5b8135611aa081611b5e565b600060208284031215611ba257600080fd5b5035919050565b60008060408385031215611bbc57600080fd5b8235611bc781611b5e565b946020939093013593505050565b801515811461108c57600080fd5b60008060408385031215611bf657600080fd5b823591506020830135611c0881611bd5565b809150509250929050565b600060208284031215611c2557600080fd5b8135611aa081611bd5565b60008060008060808587031215611c4657600080fd5b8435611c5181611b5e565b93506020850135611c6181611b5e565b92506040850135611c7181611b5e565b91506060850135611c8181611b5e565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b818103818111156119e9576119e9611c8c565b80820281158282048414176119e9576119e9611c8c565b600082611ce957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156119e9576119e9611c8c565b600060208284031215611d1357600080fd5b5051919050565b600060408284031215611d2c57600080fd5b6040516040810181811067ffffffffffffffff82111715611d5d57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208284031215611d8957600080fd5b8151611aa081611bd5565b6000825160005b81811015611db55760208186018101518583015201611d9b565b50600092019182525091905056fea2646970667358221220aa0901271356c34ec46dc1248c6057c12a86b54d00fa9671639497c33a2e85a864736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4391,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4393,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4519,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "lastRewardClaimTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4522,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "veUNO",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVotingEscrow)8799"
      },
      {
        "astId": 4525,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "emittedToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1260"
      },
      {
        "astId": 4527,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4529,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4531,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "yieldRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4533,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "yieldDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4535,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "yieldPerVeUNOStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4539,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "userYieldPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4543,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "yields",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4545,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "totalVeUNOParticipating",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4547,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "totalVeUNOSupplyStored",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4551,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "userVeUNOCheckpointed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4555,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "userVeUNOEndpointCheckpointed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4559,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "userIsInitialized",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4563,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "greylist",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4565,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "yieldCollectionPaused",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 4567,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "timelock",
        "offset": 1,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 4571,
        "contract": "contracts/apps/VeUnoDaoYieldDistributor.sol:VeUnoDaoYieldDistributor",
        "label": "rewardNotifiers",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1260": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingEscrow)8799": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}