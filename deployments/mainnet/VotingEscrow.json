{
  "address": "0x2F23092C8644ca02c6578f2389797BbF76186414",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token_addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_ownership",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_migrater",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_type",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "ForceUnlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "LogMigrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSmartWalletChecker",
          "type": "address"
        }
      ],
      "name": "applyWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSmartWalletChecker",
          "type": "address"
        }
      ],
      "name": "commitWallet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIGRATE_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apply_smart_wallet_checker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "changeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "commit_smart_wallet_checker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "create_lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_smart_wallet_checker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "get_last_user_slope",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "get_user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increase_amount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increase_unlock_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "locked__end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownership",
      "outputs": [
        {
          "internalType": "contract IOwnership",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "point_history",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_slope",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_bias",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "setUserDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slope_changes",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smart_wallet_checker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfersEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "user_point_history",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "user_point_history__ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x957aed97590c7ccb325fbf5ece2779361e68b27150bafb1f9b498356dba0e81b",
  "receipt": {
    "to": null,
    "from": "0x1Eeab8B3F0136F06BeDf45170E8d5fa1e5289A29",
    "contractAddress": "0x2F23092C8644ca02c6578f2389797BbF76186414",
    "transactionIndex": 117,
    "gasUsed": "2736328",
    "logsBloom": "0x
    "blockHash": "0xfd7f0a91eb9f613f5e578ca3435b666d1a1836fc67bc7179a501585f4c12a18b",
    "transactionHash": "0x957aed97590c7ccb325fbf5ece2779361e68b27150bafb1f9b498356dba0e81b",
    "logs": [],
    "blockNumber": 19269098,
    "cumulativeGasUsed": "11835955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x474021845c4643113458ea4414bdb7fb74a01a77",
    "Vote-Escrowed UNO",
    "veUNO",
    "1",
    "0xdeFb0C2B974F9F162901EB0B1d39a2Eb99981458",
    "0x91D6e9cdad0a61EDAB4139F2E3171029f2e3607b"
  ],
  "numDeployments": 2,
  "solcInputHash": "7b3c7fe68286779fbec2cc90c6ff3ca8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_migrater\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_type\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"ForceUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWalletChecker\",\"type\":\"address\"}],\"name\":\"applyWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWalletChecker\",\"type\":\"address\"}],\"name\":\"commitWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIGRATE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"commit_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"get_user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_bias\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"setUserDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n/***\\n *@title VotingEscrow\\n *@notice Votes have a weight depending on time, so that users are\\n *        committed to the future of (whatever they are voting for)\\n *@dev Vote weight decays linearly over time. Lock time cannot be\\n *     more than `MAXTIME` (4 years).\\n */\\n\\n// Voting escrow to have time-weighted votes\\n// Votes have a weight depending on time, so that users are committed\\n// to the future of (whatever they are voting for).\\n// The weight in this implementation is linear, and lock cannot be more than maxtime\\n// w ^\\n// 1 +        /\\n//   |      /\\n//   |    /\\n//   |  /\\n//   |/\\n// 0 +--------+------> time\\n//       maxtime (4 years?)\\n\\n// Interface for checking whether address belongs to a whitelisted\\n// type of a smart wallet.\\n// When new types are added - the whole contract is changed\\n// The check() method is modifying to be able to use caching\\n// for individual wallet addresses\\nimport \\\"./interfaces/dao/ISmartWalletChecker.sol\\\";\\n\\nimport \\\"./interfaces/pool/IOwnership.sol\\\";\\n\\n//libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract VotingEscrow is ReentrancyGuard {\\n    struct Point {\\n        int256 bias;\\n        int256 slope; // - dweight / dt\\n        uint256 ts; //timestamp\\n        uint256 blk; // block\\n    }\\n    // We cannot really do block numbers per se b/c slope is per time, not per block\\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\\n    // What we can do is to extrapolate ***At functions\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    int256 constant DEPOSIT_FOR_TYPE = 0;\\n    int256 constant CREATE_LOCK_TYPE = 1;\\n    int256 constant INCREASE_LOCK_AMOUNT = 2;\\n    int256 constant INCREASE_UNLOCK_TIME = 3;\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        int256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event ForceUnlock(address target, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    event commitWallet(address newSmartWalletChecker);\\n    event applyWallet(address newSmartWalletChecker);\\n\\n    event LogMigrate(address indexed migrator, address indexed user);\\n\\n    uint256 constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    uint256 constant MULTIPLIER = 10**18;\\n    uint256 public constant MIGRATE_TIME = 7 * 86400;\\n\\n    address public token;\\n    address public migrater;\\n    uint256 public supply;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    //everytime user deposit/withdraw/change_locktime, these values will be updated;\\n    uint256 public epoch;\\n    Point[100000000000000000000000000000] public point_history; // epoch -> unsigned point.\\n    mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\\n    mapping(address => uint256) public user_point_epoch;\\n    mapping(uint256 => int256) public slope_changes; // time -> signed slope change\\n\\n    // Aragon's view methods for compatibility\\n    address public controller;\\n    bool public transfersEnabled;\\n\\n    string public name;\\n    string public symbol;\\n    string public version;\\n    uint256 public constant decimals = 18;\\n\\n    // Checker for whitelisted (smart contract) wallets which are allowed to deposit\\n    // The goal is to prevent tokenizing the escrow\\n    address public future_smart_wallet_checker;\\n    address public smart_wallet_checker;\\n\\n    IOwnership public immutable ownership;\\n\\n    modifier onlyOwner() {\\n        require(\\n            ownership.owner() == msg.sender,\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    /***\\n     *@notice Contract constructor\\n     *@param token_addr `UNO` token address\\n     *@param _name Token name\\n     *@param _symbol Token symbol\\n     *@param _version Contract version - required for Aragon compatibility\\n     */\\n    constructor(\\n        address _token_addr,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _version,\\n        address _ownership,\\n        address _migrater\\n    ) {\\n        ownership = IOwnership(_ownership);\\n        token = _token_addr;\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n        controller = msg.sender;\\n        transfersEnabled = true;\\n\\n        name = _name;\\n        symbol = _symbol;\\n        version = _version;\\n        migrater = _migrater;\\n    }\\n\\n    /***\\n     *@notice Check if the call is from a whitelisted smart contract, revert if not\\n     *@param _addr Address to be checked\\n     */\\n    function assert_not_contract(address _addr) internal {\\n        if (_addr != tx.origin) {\\n            address checker = smart_wallet_checker; //not going to be deployed at the moment of launch.\\n            if (checker != address(0)) {\\n                if (ISmartWalletChecker(checker).check(_addr)) {\\n                    return;\\n                }\\n            }\\n            revert(\\\"contract depositors not allowed\\\");\\n        }\\n    }\\n\\n    /***\\n     *@notice Get the most recently recorded rate of voting power decrease for `_addr`\\n     *@param _addr Address of the user wallet\\n     *@return Value of the slope\\n     */\\n    function get_last_user_slope(\\n        address _addr\\n    ) external view returns (uint256) {\\n        uint256 uepoch = user_point_epoch[_addr];\\n        return uint256(user_point_history[_addr][uepoch].slope);\\n    }\\n\\n    /***\\n     *@notice Get the timestamp for checkpoint `_idx` for `_addr`\\n     *@param _addr User wallet address\\n     *@param _idx User epoch number\\n     *@return Epoch time of the checkpoint\\n     */\\n    function user_point_history__ts(\\n        address _addr,\\n        uint256 _idx\\n    ) external view returns (uint256) {\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n\\n    /***\\n     *@notice Get timestamp when `_addr`'s lock finishes\\n     *@param _addr User wallet\\n     *@return Epoch time of the lock end\\n     */\\n    function locked__end(address _addr) external view returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    /***\\n     *@notice Record global and per-user data to checkpoint\\n     *@param _addr User's wallet address. No user checkpoint if 0x0\\n     *@param _old_locked Pevious locked amount / end lock time for the user\\n     *@param _new_locked New locked amount / end lock time for the user\\n     */\\n    function _checkpoint(\\n        address _addr,\\n        LockedBalance memory _old_locked,\\n        LockedBalance memory _new_locked\\n    ) internal {\\n        Point memory _u_old;\\n        Point memory _u_new;\\n        int256 _old_dslope = 0;\\n        int256 _new_dslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (_addr != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (_old_locked.end > block.timestamp && _old_locked.amount > 0) {\\n                unchecked {\\n                    _u_old.slope = _old_locked.amount / int256(MAXTIME);\\n                }\\n                _u_old.bias =\\n                    _u_old.slope *\\n                    int256(_old_locked.end - block.timestamp);\\n            }\\n            if (_new_locked.end > block.timestamp && _new_locked.amount > 0) {\\n                unchecked {\\n                    _u_new.slope = _new_locked.amount / int256(MAXTIME);\\n                }\\n                _u_new.bias =\\n                    _u_new.slope *\\n                    int256(_new_locked.end - block.timestamp);\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // _old_locked.end can be in the past and in the future\\n            // _new_locked.end can ONLY by in the FUTURE unless everything expired than zeros\\n            _old_dslope = slope_changes[_old_locked.end];\\n            if (_new_locked.end != 0) {\\n                if (_new_locked.end == _old_locked.end) {\\n                    _new_dslope = _old_dslope;\\n                } else {\\n                    _new_dslope = slope_changes[_new_locked.end];\\n                }\\n            }\\n        }\\n        Point memory _last_point = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (_epoch > 0) {\\n            _last_point = point_history[_epoch];\\n        }\\n        uint256 _last_checkpoint = _last_point.ts;\\n        // _initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory _initial_last_point = _last_point;\\n        uint256 _block_slope = 0; // dblock/dt\\n        if (block.timestamp > _last_point.ts) {\\n            _block_slope =\\n                (MULTIPLIER * (block.number - _last_point.blk)) /\\n                (block.timestamp - _last_point.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 _t_i;\\n        unchecked {\\n            _t_i = (_last_checkpoint / WEEK) * WEEK;\\n        }\\n        for (uint256 i; i < 255; ) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            _t_i += WEEK;\\n            int256 d_slope = 0;\\n            if (_t_i > block.timestamp) {\\n                _t_i = block.timestamp;\\n            } else {\\n                d_slope = slope_changes[_t_i];\\n            }\\n            _last_point.bias =\\n                _last_point.bias -\\n                _last_point.slope *\\n                int256(_t_i - _last_checkpoint);\\n            _last_point.slope += d_slope;\\n            if (_last_point.bias < 0) {\\n                // This can happen\\n                _last_point.bias = 0;\\n            }\\n            if (_last_point.slope < 0) {\\n                // This cannot happen - just in case\\n                _last_point.slope = 0;\\n            }\\n            _last_checkpoint = _t_i;\\n            _last_point.ts = _t_i;\\n            _last_point.blk =\\n                _initial_last_point.blk +\\n                ((_block_slope * (_t_i - _initial_last_point.ts)) / MULTIPLIER);\\n            _epoch += 1;\\n            if (_t_i == block.timestamp) {\\n                _last_point.blk = block.number;\\n                break;\\n            } else {\\n                point_history[_epoch] = _last_point;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (_addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            _last_point.slope += _u_new.slope - _u_old.slope;\\n            _last_point.bias += _u_new.bias - _u_old.bias;\\n            if (_last_point.slope < 0) {\\n                _last_point.slope = 0;\\n            }\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n        }\\n        // Record the changed point into history\\n        point_history[_epoch] = _last_point;\\n\\n        address _addr2 = _addr; //To avoid being \\\"Stack Too Deep\\\"\\n\\n        if (_addr2 != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [_new_locked.end]\\n            // and add old_user_slope to [_old_locked.end]\\n            if (_old_locked.end > block.timestamp) {\\n                // _old_dslope was <something> - _u_old.slope, so we cancel that\\n                _old_dslope += _u_old.slope;\\n                if (_new_locked.end == _old_locked.end) {\\n                    _old_dslope -= _u_new.slope; // It was a new deposit, not extension\\n                }\\n                slope_changes[_old_locked.end] = _old_dslope;\\n            }\\n            if (_new_locked.end > block.timestamp) {\\n                if (_new_locked.end > _old_locked.end) {\\n                    _new_dslope -= _u_new.slope; // old slope disappeared at this point\\n                    slope_changes[_new_locked.end] = _new_dslope;\\n                }\\n                // else we recorded it already in _old_dslope\\n            }\\n\\n            // Now handle user history\\n            uint256 _user_epoch;\\n            unchecked {\\n                _user_epoch = user_point_epoch[_addr2] + 1;\\n            }\\n\\n            user_point_epoch[_addr2] = _user_epoch;\\n            _u_new.ts = block.timestamp;\\n            _u_new.blk = block.number;\\n            user_point_history[_addr2][_user_epoch] = _u_new;\\n        }\\n    }\\n\\n    /***\\n     *@notice Deposit and lock tokens for a user\\n     *@param _depositor Spender's wallet address\\n     *@param _beneficiary Beneficiary's wallet address\\n     *@param _value Amount to deposit\\n     *@param _unlock_time New time when to unlock the tokens, or 0 if unchanged\\n     *@param _locked_balance Previous locked amount / timestamp\\n     */\\n    function _deposit_for(\\n        address _depositor,\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlock_time,\\n        LockedBalance memory _locked_balance,\\n        int256 _type\\n    ) internal {\\n        LockedBalance memory _locked = LockedBalance(\\n            _locked_balance.amount,\\n            _locked_balance.end\\n        );\\n        LockedBalance memory _old_locked = LockedBalance(\\n            _locked_balance.amount,\\n            _locked_balance.end\\n        );\\n\\n        uint256 _supply_before = supply;\\n        supply = _supply_before + _value;\\n        //Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount = _locked.amount + int256(_value);\\n        if (_unlock_time != 0) {\\n            _locked.end = _unlock_time;\\n        }\\n        locked[_beneficiary] = _locked;\\n\\n        // Possibilities\\n        // Both _old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n\\n        _checkpoint(_beneficiary, _old_locked, _locked);\\n\\n        if (_value != 0) {\\n            require(\\n                IERC20(token).transferFrom(_depositor, address(this), _value)\\n            );\\n        }\\n\\n        emit Deposit(_beneficiary, _value, _locked.end, _type, block.timestamp);\\n        emit Supply(_supply_before, _supply_before + _value);\\n    }\\n\\n    function checkpoint() public {\\n        /***\\n         *@notice Record global data to checkpoint\\n         */\\n        LockedBalance memory _a;\\n        LockedBalance memory _b;\\n        _checkpoint(address(0), _a, _b);\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` tokens for `_addr` and add to the lock\\n     *@dev Anyone (even a smart contract) can deposit for someone else, but\\n     *    cannot extend their locktime and deposit for a brand new user\\n     *@param _addr User's wallet address\\n     *@param _value Amount to add to user's lock\\n     */\\n    function deposit_for(address _addr, uint256 _value) external nonReentrant {\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock.\\\");\\n\\n        _deposit_for(msg.sender, _addr, _value, 0, _locked, DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n     *@param _value Amount to deposit\\n     *@param _unlock_time Epoch time period when tokens unlock, rounded down to whole weeks\\n     */\\n    function create_lock(\\n        uint256 _value,\\n        uint256 _unlock_time\\n    ) external nonReentrant {\\n        assert_not_contract(msg.sender);\\n        require(\\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\\n            \\\"Can lock until time in future or Voting lock can be 4 years max\\\"\\n        );\\n        _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            _value,\\n            _unlock_time,\\n            _locked,\\n            CREATE_LOCK_TYPE\\n        );\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` additional tokens for `msg.sender`\\n     *        without modifying the unlock time\\n     *@param _value Amount of tokens to deposit and add to the lock\\n     */\\n    function increase_amount(uint256 _value) external nonReentrant {\\n        assert_not_contract(msg.sender);\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock.\\\");\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            _value,\\n            0,\\n            _locked,\\n            INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    /***\\n     *@notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n     *@param _unlock_time New epoch time for unlocking\\n     */\\n    function increase_unlock_time(uint256 _unlock_time) external nonReentrant {\\n        assert_not_contract(msg.sender); //@shun: need to convert to solidity\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n\\n        require(\\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\\n            \\\"Can only increase lock duration or Voting lock can be 4 years max\\\"\\n        );\\n\\n        require(_unlock_time + block.timestamp > _locked.end, \\\"Can only increase lock duration\\\");\\n        unchecked {\\n            _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        }\\n        require(\\n            _unlock_time > _locked.end,\\n            \\\"Unlock time must be greater than the current end time\\\"\\n        );\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            0,\\n            _unlock_time,\\n            _locked,\\n            INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    /***\\n     *@notice Withdraw all tokens for `msg.sender`\\n     *@dev Only possible if the lock has expired\\n     */\\n    function withdraw() external nonReentrant {\\n        LockedBalance memory _locked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n        uint256 _value = uint256(_locked.amount);\\n\\n        LockedBalance memory _old_locked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[msg.sender] = _locked;\\n        uint256 _supply_before = supply;\\n        supply = _supply_before - _value;\\n\\n        // _old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _old_locked, _locked);\\n\\n        require(IERC20(token).transfer(msg.sender, _value));\\n\\n        emit Withdraw(msg.sender, _value, block.timestamp);\\n        emit Supply(_supply_before, _supply_before - _value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /***\\n     *@notice Binary search to estimate timestamp for block number\\n     *@param _block Block to find\\n     *@param _max_epoch Don't go beyond this epoch\\n     *@return Approximate timestamp for block\\n     */\\n    function find_block_epoch(\\n        uint256 _block,\\n        uint256 _max_epoch\\n    ) internal view returns (uint256) {\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = _max_epoch;\\n        unchecked {\\n            for (uint256 i; i <= 128; i++) {\\n                // Will be always enough for 128-bit numbers\\n                if (_min >= _max) {\\n                    break;\\n                }\\n                uint256 _mid = (_min + _max + 1) / 2;\\n                if (point_history[_mid].blk <= _block) {\\n                    _min = _mid;\\n                } else {\\n                    _max = _mid - 1;\\n                }\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Metamask & Snapshot compatibility\\n     *@param _addr User wallet address\\n     *@return User's present voting power\\n     */\\n    function balanceOf(address _addr) external view returns (uint256) {\\n        uint256 _t = block.timestamp;\\n\\n        uint256 _epoch = user_point_epoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _last_point = user_point_history[_addr][_epoch];\\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n            return uint256(_last_point.bias);\\n        }\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     *@param _addr User wallet address\\n     *@param _t Epoch time to return voting power at\\n     *@return User voting power\\n     *@dev return the present voting power if _t is 0\\n     */\\n    function balanceOf(\\n        address _addr,\\n        uint256 _t\\n    ) external view returns (uint256) {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = user_point_epoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _last_point = user_point_history[_addr][_epoch];\\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n            return uint256(_last_point.bias);\\n        }\\n    }\\n\\n    //Struct to avoid \\\"Stack Too Deep\\\"\\n    struct Parameters {\\n        uint256 min;\\n        uint256 max;\\n        uint256 max_epoch;\\n        uint256 d_block;\\n        uint256 d_t;\\n    }\\n\\n    /***\\n     *@notice Measure voting power of `_addr` at block height `_block`\\n     *@dev Adheres to MiniMe `balanceOfAt` interface https//github.com/Giveth/minime\\n     *@param _addr User's wallet address\\n     *@param _block Block to calculate the voting power at\\n     *@return Voting power\\n     */\\n    function balanceOfAt(\\n        address _addr,\\n        uint256 _block\\n    ) external view returns (uint256) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number);\\n\\n        Parameters memory _st;\\n\\n        // Binary search\\n        _st.min = 0;\\n        _st.max = user_point_epoch[_addr];\\n        unchecked {\\n            for (uint256 i; i <= 128; i++) {\\n                // Will be always enough for 128-bit numbers\\n                if (_st.min >= _st.max) {\\n                    break;\\n                }\\n                uint256 _mid = (_st.min + _st.max + 1) / 2;\\n                if (user_point_history[_addr][_mid].blk <= _block) {\\n                    _st.min = _mid;\\n                } else {\\n                    _st.max = _mid - 1;\\n                }\\n            }\\n        }\\n\\n        Point memory _upoint = user_point_history[_addr][_st.min];\\n\\n        _st.max_epoch = epoch;\\n        uint256 _epoch = find_block_epoch(_block, _st.max_epoch);\\n        Point memory _point_0 = point_history[_epoch];\\n        _st.d_block = 0;\\n        _st.d_t = 0;\\n        if (_epoch < _st.max_epoch) {\\n            Point memory _point_1 = point_history[_epoch + 1];\\n            _st.d_block = _point_1.blk - _point_0.blk;\\n            _st.d_t = _point_1.ts - _point_0.ts;\\n        } else {\\n            _st.d_block = block.number - _point_0.blk;\\n            _st.d_t = block.timestamp - _point_0.ts;\\n        }\\n        uint256 block_time = _point_0.ts;\\n        if (_st.d_block != 0) {\\n            block_time += (_st.d_t * (_block - _point_0.blk)) / _st.d_block;\\n        }\\n\\n        _upoint.bias -= _upoint.slope * int256(block_time - _upoint.ts);\\n        if (_upoint.bias >= 0) {\\n            return uint256(_upoint.bias);\\n        }\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power at some point in the past\\n     *@param point The point (bias/slope) to start search from\\n     *@param t Time to calculate the total voting power at\\n     *@return Total voting power at that time\\n     */\\n    function supply_at(\\n        Point memory point,\\n        uint256 t\\n    ) internal view returns (uint256) {\\n        Point memory _last_point = point;\\n        uint256 _t_i;\\n        unchecked {\\n            _t_i = (_last_point.ts / WEEK) * WEEK;\\n        }\\n        for (uint256 i; i < 255; ) {\\n            _t_i += WEEK;\\n            int256 d_slope = 0;\\n\\n            if (_t_i > t) {\\n                _t_i = t;\\n            } else {\\n                d_slope = slope_changes[_t_i];\\n            }\\n            _last_point.bias -=\\n                _last_point.slope *\\n                int256(_t_i - _last_point.ts);\\n\\n            if (_t_i == t) {\\n                break;\\n            }\\n            _last_point.slope += d_slope;\\n            _last_point.ts = _t_i;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (_last_point.bias < 0) {\\n            _last_point.bias = 0;\\n        }\\n        return uint256(_last_point.bias);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n\\n    function totalSupply() external view returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory _last_point = point_history[_epoch];\\n\\n        return supply_at(_last_point, block.timestamp);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n    function totalSupply(uint256 _t) external view returns (uint256) {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = epoch;\\n        Point memory _last_point = point_history[_epoch];\\n\\n        return supply_at(_last_point, _t);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power at some point in the past\\n     *@param _block Block to calculate the total voting power at\\n     *@return Total voting power at `_block`\\n     */\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number);\\n        uint256 _epoch = epoch;\\n        uint256 _target_epoch = find_block_epoch(_block, _epoch);\\n\\n        Point memory _point = point_history[_target_epoch];\\n        uint256 dt = 0;\\n        if (_target_epoch < _epoch) {\\n            Point memory _point_next = point_history[_target_epoch + 1];\\n            if (_point.blk != _point_next.blk) {\\n                dt =\\n                    ((_block - _point.blk) * (_point_next.ts - _point.ts)) /\\n                    (_point_next.blk - _point.blk);\\n            }\\n        } else {\\n            if (_point.blk != block.number) {\\n                dt =\\n                    ((_block - _point.blk) * (block.timestamp - _point.ts)) /\\n                    (block.number - _point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n\\n        return supply_at(_point, _point.ts + dt);\\n    }\\n\\n    /***\\n     *@dev Dummy method required for Aragon compatibility\\n     */\\n    function changeController(address _newController) external {\\n        require(msg.sender == controller);\\n        controller = _newController;\\n    }\\n\\n    function get_user_point_epoch(\\n        address _user\\n    ) external view returns (uint256) {\\n        return user_point_epoch[_user];\\n    }\\n\\n    //---------------------- Admin Only ----------------------//\\n    /***\\n     *@notice Set an external contract to check for approved smart contract wallets\\n     *@param _addr Address of Smart contract checker\\n     */\\n    function commit_smart_wallet_checker(address _addr) external onlyOwner {\\n        future_smart_wallet_checker = _addr;\\n\\n        emit commitWallet(_addr);\\n    }\\n\\n    /***\\n     *@notice Apply setting external contract to check approved smart contract wallets\\n     */\\n    function apply_smart_wallet_checker() external onlyOwner {\\n        address _future_smart_wallet_checker = future_smart_wallet_checker;\\n        smart_wallet_checker = _future_smart_wallet_checker;\\n\\n        emit commitWallet(_future_smart_wallet_checker);\\n    }\\n\\n    function setUserDetails(address _to, uint256 _epoch, int256 _slope, int256 _bias, uint256 _ts, uint256 _blk, uint256 _end, int256 _amount) external {\\n        require(msg.sender == migrater, \\\"Can only be called by migrater\\\");\\n        require(block.timestamp < MIGRATE_TIME, \\\"Migrate time passed\\\");\\n        user_point_epoch[_to] = _epoch;\\n        user_point_history[_to][_epoch].slope = _slope;\\n        user_point_history[_to][_epoch].bias = _bias;\\n        user_point_history[_to][_epoch].ts = _ts;\\n        user_point_history[_to][_epoch].blk = _blk;\\n        locked[_to].end = _end;\\n        locked[_to].amount = _amount;\\n\\n        emit LogMigrate(msg.sender, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x012a9cbe93fde5cb198f1a6b26ee80a1f10c971f72264a97275b0378b0ae1c08\",\"license\":\"MIT\"},\"contracts/interfaces/dao/ISmartWalletChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface ISmartWalletChecker {\\n    function check(address _addr) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9bfd95f188e1b71a97f0b95f62f28785f809eb765075b3f95867fe6f364fbec4\",\"license\":\"MIT\"},\"contracts/interfaces/pool/IOwnership.sol\":{\"content\":\"pragma solidity =0.8.23;\\n\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOwnership {\\n    function owner() external view returns (address);\\n\\n    function futureOwner() external view returns (address);\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function acceptTransferOwnership() external;\\n}\\n\",\"keccak256\":\"0x2fdad7aec4381208267768aedec6d5079f8916d2440011fb6e154b1a11cc0719\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620030e5380380620030e58339810160408190526200003491620001f2565b600160008190556001600160a01b0383811660805281546001600160a01b03191690881617905543600955426008556c050c783eb9b5c85f2a800000098054600160a01b6001600160a81b03199091163360ff60a01b1916171790556c050c783eb9b5c85f2a8000000a620000aa86826200034c565b506c050c783eb9b5c85f2a8000000b620000c585826200034c565b506c050c783eb9b5c85f2a8000000c620000e084826200034c565b50600280546001600160a01b0319166001600160a01b039290921691909117905550620004189350505050565b80516001600160a01b03811681146200012557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015257600080fd5b81516001600160401b03808211156200016f576200016f6200012a565b604051601f8301601f19908116603f011681019082821181831017156200019a576200019a6200012a565b8160405283815260209250866020858801011115620001b857600080fd5b600091505b83821015620001dc5785820183015181830184015290820190620001bd565b6000602085830101528094505050505092915050565b60008060008060008060c087890312156200020c57600080fd5b62000217876200010d565b60208801519096506001600160401b03808211156200023557600080fd5b620002438a838b0162000140565b965060408901519150808211156200025a57600080fd5b620002688a838b0162000140565b955060608901519150808211156200027f57600080fd5b506200028e89828a0162000140565b9350506200029f608088016200010d565b9150620002af60a088016200010d565b90509295509295509295565b600181811c90821680620002d057607f821691505b602082108103620002f157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000347576000816000526020600020601f850160051c81016020861015620003225750805b601f850160051c820191505b8181101562000343578281556001016200032e565b5050505b505050565b81516001600160401b038111156200036857620003686200012a565b6200038081620003798454620002bb565b84620002f7565b602080601f831160018114620003b857600084156200039f5750858301515b600019600386901b1c1916600185901b17855562000343565b600085815260208120601f198616915b82811015620003e957888601518255948401946001909101908401620003c8565b5085821015620004085787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612ca362000442600039600081816103da0152818161117c01526117cd0152612ca36000f3fe608060405234801561001057600080fd5b50600436106102ac5760003560e01c806377a682f21161017b578063bef97c87116100d8578063da020a181161008c578063eff7a61211610071578063eff7a61214610632578063f77c479114610645578063fc0c546a1461066457600080fd5b8063da020a181461060c578063ec7569351461061f57600080fd5b8063cbf9fe5f116100bd578063cbf9fe5f14610588578063d1febfb9146105c4578063d5443e9d146105d757600080fd5b8063bef97c871461053f578063c2c4c5c11461058057600080fd5b806395d89b411161012f5780639b4e8f89116101145780639b4e8f89146104f6578063adc6358914610500578063bd85b0391461052c57600080fd5b806395d89b41146104db578063981b24d0146104e357600080fd5b80638e5b490f116101605780638e5b490f146104ab5780638ff36fd1146104b3578063900cf0cf146104d257600080fd5b806377a682f2146104855780637c74a1741461049857600080fd5b80633cebb823116102295780635d03147a116101dd57806370a08231116101c257806370a0823114610427578063711974841461043a5780637175d4f71461046657600080fd5b80635d03147a146103d557806365fc38731461041457600080fd5b80634ee2cd7e1161020e5780634ee2cd7e146103a757806354fd4d50146103ba57806357f901e2146103c257600080fd5b80633cebb823146103815780634957677c1461039457600080fd5b806318160ddd11610280578063313ce56711610265578063313ce5671461035c5780633a46273e146103645780633ccfd60b1461037957600080fd5b806318160ddd1461032157806328d09d471461032957600080fd5b8062fdd58e146102b1578063010ae757146102d7578063047fc9aa1461030357806306fdde031461030c575b600080fd5b6102c46102bf366004612969565b610677565b6040519081526020015b60405180910390f35b6102c46102e5366004612995565b6c050c783eb9b5c85f2a800000076020526000908152604090205481565b6102c460035481565b610314610778565b6040516102ce91906129b9565b6102c4610812565b61033c610337366004612969565b610882565b6040805194855260208501939093529183015260608201526080016102ce565b6102c4601281565b610377610372366004612969565b6108cb565b005b610377610a1d565b61037761038f366004612995565b610c23565b6103776103a2366004612a26565b610c81565b6102c46103b5366004612969565b610dc8565b610314611157565b6103776103d0366004612995565b611170565b6103fc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ce565b610377610422366004612a3f565b6112c0565b6102c4610435366004612995565b61144e565b6102c4610448366004612a26565b6c050c783eb9b5c85f2a800000086020526000908152604090205481565b6c050c783eb9b5c85f2a8000000e546103fc906001600160a01b031681565b610377610493366004612a61565b611539565b6102c46104a6366004612995565b611762565b6103776117c1565b6c050c783eb9b5c85f2a8000000d546103fc906001600160a01b031681565b6102c460055481565b610314611919565b6102c46104f1366004612a26565b611932565b6102c462093a8081565b6102c461050e366004612995565b6001600160a01b031660009081526004602052604090206001015490565b6102c461053a366004612a26565b611aef565b6c050c783eb9b5c85f2a80000009546105709074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020016102ce565b610377611b6c565b6105af610596366004612995565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152016102ce565b61033c6105d2366004612a26565b611ba0565b6102c46105e5366004612995565b6001600160a01b031660009081526c050c783eb9b5c85f2a80000007602052604090205490565b6102c461061a366004612969565b611bda565b6002546103fc906001600160a01b031681565b610377610640366004612a26565b611c22565b6c050c783eb9b5c85f2a80000009546103fc906001600160a01b031681565b6001546103fc906001600160a01b031681565b600081600003610685574291505b6001600160a01b03831660009081526c050c783eb9b5c85f2a800000076020526040812054908190036106bc576000915050610772565b6001600160a01b03841660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca0081106106f4576106f4612abf565b60408051608081018252600492909202929092018054825260018101546020830152600281015492820183905260030154606082015291506107369085612aeb565b81602001516107459190612afe565b81518290610754908390612b4a565b90525080516000131561076657600081525b5191506107729050565b505b92915050565b6c050c783eb9b5c85f2a8000000a805461079190612b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd90612b6a565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b505050505081565b600554600090816006826c01431e0fae6d7217caa0000000811061083857610838612abf565b60040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905061087b8142611e98565b9250505090565b6c050c783eb9b5c85f2a8000000660205281600052604060002081633b9aca0081106108ad57600080fd5b60040201805460018201546002830154600390930154919450925084565b6108d3611f80565b600081116109285760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c7565000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166000908152600460209081526040808320815180830190925280548083526001909101549282019290925291126109ab5760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e6400000000000000000000604482015260640161091f565b428160200151116109fe5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e0000000000604482015260640161091f565b610a0e3384846000856000611fc3565b50610a196001600055565b5050565b610a25611f80565b60408051808201825233600081815260046020818152948220805485529290915283526001015491810182905290421015610aa25760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e27742065787069726500000000000000000000604482015260640161091f565b8051604080518082018252336000818152600460208181529482208054855260018101805487870152868901848152848a52949093529452855190935551909155600354610af08382612aeb565b600355610afe338386612195565b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c9190612ba4565b610b9557600080fd5b6040805184815242602082015233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81610bfb8582612aeb565b6040805192835260208301919091520160405180910390a150505050610c216001600055565b565b6c050c783eb9b5c85f2a80000009546001600160a01b03163314610c4657600080fd5b6c050c783eb9b5c85f2a80000009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610c89611f80565b610c92336127e2565b33600090815260046020908152604091829020825180840190935280548352600101549082015281610d065760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c75650000000000000000604482015260640161091f565b8051600012610d575760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e6400000000000000000000604482015260640161091f565b42816020015111610daa5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e0000000000604482015260640161091f565b610dba3333846000856002611fc3565b50610dc56001600055565b50565b600043821115610dd757600080fd5b610e096040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008082526001600160a01b03851681526c050c783eb9b5c85f2a8000000760209081526040822054908301525b60808111610ef157602082015182511015610ef15760006002836020015184600001510160010181610e6b57610e6b612bc6565b6001600160a01b03881660009081526c050c783eb9b5c85f2a80000006602052604090209190049150859082633b9aca008110610eaa57610eaa612abf565b600402016003015411610ebf57808352610ee8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160208401525b50600101610e37565b506001600160a01b03841660009081526c050c783eb9b5c85f2a80000006602052604081208251633b9aca008110610f2b57610f2b612abf565b604080516080810182526004929092029290920180548252600181015460208301526002810154828401526003015460608201526005549184018290529150600090610f789086906128e6565b905060006006826c01431e0fae6d7217caa00000008110610f9b57610f9b612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000846060018181525050600084608001818152505083604001518210156110925760006006611005846001612bdc565b6c01431e0fae6d7217caa0000000811061102157611021612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160600151816060015161106e9190612aeb565b6060860152604080830151908201516110879190612aeb565b6080860152506110bb565b60608101516110a19043612aeb565b606085015260408101516110b59042612aeb565b60808501525b60408101516060850151156111055784606001518260600151886110df9190612aeb565b86608001516110ee9190612bef565b6110f89190612c06565b6111029082612bdc565b90505b60408401516111149082612aeb565b84602001516111239190612afe565b84518590611132908390612b4a565b905250835160001361114c57505090519250610772915050565b505050505092915050565b6c050c783eb9b5c85f2a8000000c805461079190612b6a565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190612c28565b6001600160a01b0316146112525760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206f706572617465604482015260640161091f565b6c050c783eb9b5c85f2a8000000d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd892557f2b4602e6f5c9bd6c7231cbc9f3d9a7dd4dd23a84a951d7460f8e868b906020015b60405180910390a150565b6112c8611f80565b6112d1336127e2565b6000811180156112e55750630784ce008111155b6113575760405162461bcd60e51b815260206004820152603f60248201527f43616e206c6f636b20756e74696c2074696d6520696e20667574757265206f7260448201527f20566f74696e67206c6f636b2063616e2062652034207965617273206d617800606482015260840161091f565b62093a806113658183612c06565b61136f9190612bef565b6113799042612bdc565b336000908152600460209081526040918290208251808401909352805483526001015490820152909150826113f05760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c75650000000000000000604482015260640161091f565b80511561143f5760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e7320666972737400000000000000604482015260640161091f565b610a0e33338585856001611fc3565b6001600160a01b03811660009081526c050c783eb9b5c85f2a8000000760205260408120544290808303611486575060009392505050565b6001600160a01b03841660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca0081106114be576114be612abf565b60408051608081018252600492909202929092018054825260018101546020830152600281015492820183905260030154606082015291506115009084612aeb565b816020015161150f9190612afe565b8151829061151e908390612b4a565b90525080516000131561153057600081525b51949350505050565b6002546001600160a01b031633146115935760405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792062652063616c6c6564206279206d696772617465720000604482015260640161091f565b62093a8042106115e55760405162461bcd60e51b815260206004820152601360248201527f4d6967726174652074696d652070617373656400000000000000000000000000604482015260640161091f565b6001600160a01b03881660009081526c050c783eb9b5c85f2a80000007602090815260408083208a90556c050c783eb9b5c85f2a800000069091529020869088633b9aca00811061163857611638612abf565b60040201600101556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020859088633b9aca00811061167a5761167a612abf565b60040201556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020849088633b9aca0081106116b9576116b9612abf565b60040201600201556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020839088633b9aca0081106116fb576116fb612abf565b600490810291909101600301919091556001600160a01b038916600081815260209290925260408083206001810186905584905551909133917f50e6e0d23dd37fcefb9696d39f0eae0f342c365955b9e335883542761c3fe4089190a35050505050505050565b6001600160a01b03811660009081526c050c783eb9b5c85f2a8000000760209081526040808320546c050c783eb9b5c85f2a80000006909252822081633b9aca0081106117b1576117b1612abf565b6004020160010154915050919050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612c28565b6001600160a01b0316146118a35760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206f706572617465604482015260640161091f565b6c050c783eb9b5c85f2a8000000d546c050c783eb9b5c85f2a8000000e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691821790556040518181527fd892557f2b4602e6f5c9bd6c7231cbc9f3d9a7dd4dd23a84a951d7460f8e868b906020016112b5565b6c050c783eb9b5c85f2a8000000b805461079190612b6a565b60004382111561194157600080fd5b600554600061195084836128e6565b905060006006826c01431e0fae6d7217caa0000000811061197357611973612abf565b600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600083831015611a7d57600060066119c5856001612bdc565b6c01431e0fae6d7217caa000000081106119e1576119e1612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060600151836060015114611a775782606001518160600151611a3d9190612aeb565b83604001518260400151611a519190612aeb565b6060850151611a60908a612aeb565b611a6a9190612bef565b611a749190612c06565b91505b50611acc565b43826060015114611acc576060820151611a979043612aeb565b6040830151611aa69042612aeb565b6060840151611ab59089612aeb565b611abf9190612bef565b611ac99190612c06565b90505b611ae582828460400151611ae09190612bdc565b611e98565b9695505050505050565b600081600003611afd574291505b60055460006006826c01431e0fae6d7217caa00000008110611b2157611b21612abf565b600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050611b648185611e98565b949350505050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610a1960008383612195565b6006816c01431e0fae6d7217caa00000008110611bbc57600080fd5b60040201805460018201546002830154600390930154919350919084565b6001600160a01b03821660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca008110611c1257611c12612abf565b6004020160020154905092915050565b611c2a611f80565b611c33336127e2565b33600090815260046020908152604091829020825180840190935280548352600101549082018190524210611caa5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b20657870697265640000000000000000000000000000000000000000604482015260640161091f565b8051600012611cfb5760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b6564000000000000000000000000000000604482015260640161091f565b600082118015611d0f5750630784ce008211155b611da75760405162461bcd60e51b815260206004820152604160248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e2060448201527f6f7220566f74696e67206c6f636b2063616e2062652034207965617273206d6160648201527f7800000000000000000000000000000000000000000000000000000000000000608482015260a40161091f565b6020810151611db64284612bdc565b11611e035760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e00604482015260640161091f565b62093a80808304024201915080602001518211611e885760405162461bcd60e51b815260206004820152603560248201527f556e6c6f636b2074696d65206d7573742062652067726561746572207468616e60448201527f207468652063757272656e7420656e642074696d650000000000000000000000606482015260840161091f565b610dba3333600085856003611fc3565b600080839050600062093a8080836040015181611eb757611eb7612bc6565b0402905060005b60ff811015611f6757611ed462093a8083612bdc565b9150600085831115611ee857859250611f05565b5060008281526c050c783eb9b5c85f2a8000000860205260409020545b6040840151611f149084612aeb565b8460200151611f239190612afe565b84518590611f32908390612b4a565b905250858303611f425750611f67565b8084602001818151611f549190612c45565b9052505060408301829052600101611ebe565b50815160001315611f7757600082525b50519392505050565b600260005403611fbc576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6040805180820182528351815260208085018051828401528351808501909452855184525190830152600354909190611ffc8782612bdc565b600355825161200c908890612c45565b8352851561201c57602083018690525b6001600160a01b03881660009081526004602090815260409091208451815590840151600190910155612050888385612195565b86156120f5576001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152306024830152604482018a9052909116906323b872dd906064016020604051808303816000875af11580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec9190612ba4565b6120f557600080fd5b602080840151604080518a81529283018790524290830152906001600160a01b038a16907f25a2cd6979bf1e8caf0d1ced1c5b3b70e9870bc562e6cfd5c551d71e24fb19ea9060600160405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c816121728982612bdc565b6040805192835260208301919091520160405180910390a1505050505050505050565b6121c06040518060800160405280600081526020016000815260200160008152602001600081525090565b6121eb6040518060800160405280600081526020016000815260200160008152602001600081525090565b60055460009081906001600160a01b038816156122ff57428760200151118015612216575086516000125b1561224d578651630784ce00900560208087019190915287015161223b904290612aeb565b856020015161224a9190612afe565b85525b428660200151118015612261575085516000125b15612298578551630784ce009005602080860191909152860151612286904290612aeb565b84602001516122959190612afe565b84525b60208088015160009081526c050c783eb9b5c85f2a800000088252604090205490870151909350156122ff5786602001518660200151036122db578291506122ff565b60208087015160009081526c050c783eb9b5c85f2a80000008909152604090205491505b604080516080810182526000808252602082015242918101919091524360608201528115612380576006826c01431e0fae6d7217caa0000000811061234657612346612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090505b6040810151816000428310156123cd57604084015161239f9042612aeb565b60608501516123ae9043612aeb565b6123c090670de0b6b3a7640000612bef565b6123ca9190612c06565b90505b62093a808084040260005b60ff811015612545576123ee62093a8083612bdc565b91506000428311156124025742925061241f565b5060008281526c050c783eb9b5c85f2a8000000860205260409020545b6124298684612aeb565b87602001516124389190612afe565b87516124449190612b4a565b875260208701805182919061245a908390612c45565b90525086516000131561246c57600087525b60008760200151121561248157600060208801525b60408088018490528501519295508592670de0b6b3a7640000906124a59085612aeb565b6124af9086612bef565b6124b99190612c06565b85606001516124c89190612bdc565b60608801526124d8600189612bdc565b97504283036124ed5750436060870152612545565b866006896c01431e0fae6d7217caa0000000811061250d5761250d612abf565b6004020160008201518160000155602082015181600101556040820151816002015560608201518160030155905050506001016123d8565b5060058690556001600160a01b038d16156125c6578960200151896020015161256e9190612b4a565b8560200181815161257f9190612c45565b905250895189516125909190612b4a565b8551869061259f908390612c45565b9052506020850151600013156125b757600060208601525b8451600013156125c657600085525b846006876c01431e0fae6d7217caa000000081106125e6576125e6612abf565b82516004919091029190910190815560208201516001820155604082015160028201556060909101516003909101558c6001600160a01b038116156127d257428d6020015111156126875760208b0151612640908a612c45565b98508c602001518c60200151036126635760208a0151612660908a612b4a565b98505b6020808e015160009081526c050c783eb9b5c85f2a80000008909152604090208990555b428c6020015111156126d8578c602001518c6020015111156126d85760208a01516126b29089612b4a565b6020808e015160009081526c050c783eb9b5c85f2a800000089091526040902081905597505b60006c050c783eb9b5c85f2a800000076000836001600160a01b03166001600160a01b03168152602001908152602001600020546001019050806c050c783eb9b5c85f2a800000076000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550428b6040018181525050438b60600181815250508a6c050c783eb9b5c85f2a800000066000846001600160a01b03166001600160a01b0316815260200190815260200160002082633b9aca0081106127a1576127a1612abf565b6004020160008201518160000155602082015181600101556040820151816002015560608201518160030155905050505b5050505050505050505050505050565b6001600160a01b0381163214610dc5576c050c783eb9b5c85f2a8000000e546001600160a01b0316801561289e576040517fc23697a80000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015282169063c23697a8906024016020604051808303816000875af1158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190612ba4565b1561289e575050565b60405162461bcd60e51b815260206004820152601f60248201527f636f6e7472616374206465706f7369746f7273206e6f7420616c6c6f77656400604482015260640161091f565b60008082815b6080811161294a578183101561294a57600282840160010104866006826c01431e0fae6d7217caa0000000811061292557612925612abf565b60040201600301541161293a57809350612941565b6001810392505b506001016128ec565b5090949350505050565b6001600160a01b0381168114610dc557600080fd5b6000806040838503121561297c57600080fd5b823561298781612954565b946020939093013593505050565b6000602082840312156129a757600080fd5b81356129b281612954565b9392505050565b60006020808352835180602085015260005b818110156129e7578581018301518582016040015282016129cb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060208284031215612a3857600080fd5b5035919050565b60008060408385031215612a5257600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215612a7e57600080fd5b8835612a8981612954565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561077257610772612ad5565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615612b3657612b36612ad5565b818105831482151761077257610772612ad5565b818103600083128015838313168383128216171561077057610770612ad5565b600181811c90821680612b7e57607f821691505b602082108103612b9e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612bb657600080fd5b815180151581146129b257600080fd5b634e487b7160e01b600052601260045260246000fd5b8082018082111561077257610772612ad5565b808202811582820484141761077257610772612ad5565b600082612c2357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612c3a57600080fd5b81516129b281612954565b8082018281126000831280158216821582161715612c6557612c65612ad5565b50509291505056fea264697066735822122005a2a87cf46d693d6af623dda2d3ee6d306683c17f855225ad58e7815aa9ac8964736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ac5760003560e01c806377a682f21161017b578063bef97c87116100d8578063da020a181161008c578063eff7a61211610071578063eff7a61214610632578063f77c479114610645578063fc0c546a1461066457600080fd5b8063da020a181461060c578063ec7569351461061f57600080fd5b8063cbf9fe5f116100bd578063cbf9fe5f14610588578063d1febfb9146105c4578063d5443e9d146105d757600080fd5b8063bef97c871461053f578063c2c4c5c11461058057600080fd5b806395d89b411161012f5780639b4e8f89116101145780639b4e8f89146104f6578063adc6358914610500578063bd85b0391461052c57600080fd5b806395d89b41146104db578063981b24d0146104e357600080fd5b80638e5b490f116101605780638e5b490f146104ab5780638ff36fd1146104b3578063900cf0cf146104d257600080fd5b806377a682f2146104855780637c74a1741461049857600080fd5b80633cebb823116102295780635d03147a116101dd57806370a08231116101c257806370a0823114610427578063711974841461043a5780637175d4f71461046657600080fd5b80635d03147a146103d557806365fc38731461041457600080fd5b80634ee2cd7e1161020e5780634ee2cd7e146103a757806354fd4d50146103ba57806357f901e2146103c257600080fd5b80633cebb823146103815780634957677c1461039457600080fd5b806318160ddd11610280578063313ce56711610265578063313ce5671461035c5780633a46273e146103645780633ccfd60b1461037957600080fd5b806318160ddd1461032157806328d09d471461032957600080fd5b8062fdd58e146102b1578063010ae757146102d7578063047fc9aa1461030357806306fdde031461030c575b600080fd5b6102c46102bf366004612969565b610677565b6040519081526020015b60405180910390f35b6102c46102e5366004612995565b6c050c783eb9b5c85f2a800000076020526000908152604090205481565b6102c460035481565b610314610778565b6040516102ce91906129b9565b6102c4610812565b61033c610337366004612969565b610882565b6040805194855260208501939093529183015260608201526080016102ce565b6102c4601281565b610377610372366004612969565b6108cb565b005b610377610a1d565b61037761038f366004612995565b610c23565b6103776103a2366004612a26565b610c81565b6102c46103b5366004612969565b610dc8565b610314611157565b6103776103d0366004612995565b611170565b6103fc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ce565b610377610422366004612a3f565b6112c0565b6102c4610435366004612995565b61144e565b6102c4610448366004612a26565b6c050c783eb9b5c85f2a800000086020526000908152604090205481565b6c050c783eb9b5c85f2a8000000e546103fc906001600160a01b031681565b610377610493366004612a61565b611539565b6102c46104a6366004612995565b611762565b6103776117c1565b6c050c783eb9b5c85f2a8000000d546103fc906001600160a01b031681565b6102c460055481565b610314611919565b6102c46104f1366004612a26565b611932565b6102c462093a8081565b6102c461050e366004612995565b6001600160a01b031660009081526004602052604090206001015490565b6102c461053a366004612a26565b611aef565b6c050c783eb9b5c85f2a80000009546105709074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020016102ce565b610377611b6c565b6105af610596366004612995565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152016102ce565b61033c6105d2366004612a26565b611ba0565b6102c46105e5366004612995565b6001600160a01b031660009081526c050c783eb9b5c85f2a80000007602052604090205490565b6102c461061a366004612969565b611bda565b6002546103fc906001600160a01b031681565b610377610640366004612a26565b611c22565b6c050c783eb9b5c85f2a80000009546103fc906001600160a01b031681565b6001546103fc906001600160a01b031681565b600081600003610685574291505b6001600160a01b03831660009081526c050c783eb9b5c85f2a800000076020526040812054908190036106bc576000915050610772565b6001600160a01b03841660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca0081106106f4576106f4612abf565b60408051608081018252600492909202929092018054825260018101546020830152600281015492820183905260030154606082015291506107369085612aeb565b81602001516107459190612afe565b81518290610754908390612b4a565b90525080516000131561076657600081525b5191506107729050565b505b92915050565b6c050c783eb9b5c85f2a8000000a805461079190612b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd90612b6a565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b505050505081565b600554600090816006826c01431e0fae6d7217caa0000000811061083857610838612abf565b60040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905061087b8142611e98565b9250505090565b6c050c783eb9b5c85f2a8000000660205281600052604060002081633b9aca0081106108ad57600080fd5b60040201805460018201546002830154600390930154919450925084565b6108d3611f80565b600081116109285760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c7565000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166000908152600460209081526040808320815180830190925280548083526001909101549282019290925291126109ab5760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e6400000000000000000000604482015260640161091f565b428160200151116109fe5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e0000000000604482015260640161091f565b610a0e3384846000856000611fc3565b50610a196001600055565b5050565b610a25611f80565b60408051808201825233600081815260046020818152948220805485529290915283526001015491810182905290421015610aa25760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e27742065787069726500000000000000000000604482015260640161091f565b8051604080518082018252336000818152600460208181529482208054855260018101805487870152868901848152848a52949093529452855190935551909155600354610af08382612aeb565b600355610afe338386612195565b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c9190612ba4565b610b9557600080fd5b6040805184815242602082015233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81610bfb8582612aeb565b6040805192835260208301919091520160405180910390a150505050610c216001600055565b565b6c050c783eb9b5c85f2a80000009546001600160a01b03163314610c4657600080fd5b6c050c783eb9b5c85f2a80000009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610c89611f80565b610c92336127e2565b33600090815260046020908152604091829020825180840190935280548352600101549082015281610d065760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c75650000000000000000604482015260640161091f565b8051600012610d575760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e6400000000000000000000604482015260640161091f565b42816020015111610daa5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e0000000000604482015260640161091f565b610dba3333846000856002611fc3565b50610dc56001600055565b50565b600043821115610dd757600080fd5b610e096040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008082526001600160a01b03851681526c050c783eb9b5c85f2a8000000760209081526040822054908301525b60808111610ef157602082015182511015610ef15760006002836020015184600001510160010181610e6b57610e6b612bc6565b6001600160a01b03881660009081526c050c783eb9b5c85f2a80000006602052604090209190049150859082633b9aca008110610eaa57610eaa612abf565b600402016003015411610ebf57808352610ee8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160208401525b50600101610e37565b506001600160a01b03841660009081526c050c783eb9b5c85f2a80000006602052604081208251633b9aca008110610f2b57610f2b612abf565b604080516080810182526004929092029290920180548252600181015460208301526002810154828401526003015460608201526005549184018290529150600090610f789086906128e6565b905060006006826c01431e0fae6d7217caa00000008110610f9b57610f9b612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000846060018181525050600084608001818152505083604001518210156110925760006006611005846001612bdc565b6c01431e0fae6d7217caa0000000811061102157611021612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160600151816060015161106e9190612aeb565b6060860152604080830151908201516110879190612aeb565b6080860152506110bb565b60608101516110a19043612aeb565b606085015260408101516110b59042612aeb565b60808501525b60408101516060850151156111055784606001518260600151886110df9190612aeb565b86608001516110ee9190612bef565b6110f89190612c06565b6111029082612bdc565b90505b60408401516111149082612aeb565b84602001516111239190612afe565b84518590611132908390612b4a565b905250835160001361114c57505090519250610772915050565b505050505092915050565b6c050c783eb9b5c85f2a8000000c805461079190612b6a565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190612c28565b6001600160a01b0316146112525760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206f706572617465604482015260640161091f565b6c050c783eb9b5c85f2a8000000d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd892557f2b4602e6f5c9bd6c7231cbc9f3d9a7dd4dd23a84a951d7460f8e868b906020015b60405180910390a150565b6112c8611f80565b6112d1336127e2565b6000811180156112e55750630784ce008111155b6113575760405162461bcd60e51b815260206004820152603f60248201527f43616e206c6f636b20756e74696c2074696d6520696e20667574757265206f7260448201527f20566f74696e67206c6f636b2063616e2062652034207965617273206d617800606482015260840161091f565b62093a806113658183612c06565b61136f9190612bef565b6113799042612bdc565b336000908152600460209081526040918290208251808401909352805483526001015490820152909150826113f05760405162461bcd60e51b815260206004820152601860248201527f6465763a206e656564206e6f6e2d7a65726f2076616c75650000000000000000604482015260640161091f565b80511561143f5760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e7320666972737400000000000000604482015260640161091f565b610a0e33338585856001611fc3565b6001600160a01b03811660009081526c050c783eb9b5c85f2a8000000760205260408120544290808303611486575060009392505050565b6001600160a01b03841660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca0081106114be576114be612abf565b60408051608081018252600492909202929092018054825260018101546020830152600281015492820183905260030154606082015291506115009084612aeb565b816020015161150f9190612afe565b8151829061151e908390612b4a565b90525080516000131561153057600081525b51949350505050565b6002546001600160a01b031633146115935760405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792062652063616c6c6564206279206d696772617465720000604482015260640161091f565b62093a8042106115e55760405162461bcd60e51b815260206004820152601360248201527f4d6967726174652074696d652070617373656400000000000000000000000000604482015260640161091f565b6001600160a01b03881660009081526c050c783eb9b5c85f2a80000007602090815260408083208a90556c050c783eb9b5c85f2a800000069091529020869088633b9aca00811061163857611638612abf565b60040201600101556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020859088633b9aca00811061167a5761167a612abf565b60040201556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020849088633b9aca0081106116b9576116b9612abf565b60040201600201556001600160a01b03881660009081526c050c783eb9b5c85f2a8000000660205260409020839088633b9aca0081106116fb576116fb612abf565b600490810291909101600301919091556001600160a01b038916600081815260209290925260408083206001810186905584905551909133917f50e6e0d23dd37fcefb9696d39f0eae0f342c365955b9e335883542761c3fe4089190a35050505050505050565b6001600160a01b03811660009081526c050c783eb9b5c85f2a8000000760209081526040808320546c050c783eb9b5c85f2a80000006909252822081633b9aca0081106117b1576117b1612abf565b6004020160010154915050919050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612c28565b6001600160a01b0316146118a35760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206f706572617465604482015260640161091f565b6c050c783eb9b5c85f2a8000000d546c050c783eb9b5c85f2a8000000e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691821790556040518181527fd892557f2b4602e6f5c9bd6c7231cbc9f3d9a7dd4dd23a84a951d7460f8e868b906020016112b5565b6c050c783eb9b5c85f2a8000000b805461079190612b6a565b60004382111561194157600080fd5b600554600061195084836128e6565b905060006006826c01431e0fae6d7217caa0000000811061197357611973612abf565b600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600083831015611a7d57600060066119c5856001612bdc565b6c01431e0fae6d7217caa000000081106119e1576119e1612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060600151836060015114611a775782606001518160600151611a3d9190612aeb565b83604001518260400151611a519190612aeb565b6060850151611a60908a612aeb565b611a6a9190612bef565b611a749190612c06565b91505b50611acc565b43826060015114611acc576060820151611a979043612aeb565b6040830151611aa69042612aeb565b6060840151611ab59089612aeb565b611abf9190612bef565b611ac99190612c06565b90505b611ae582828460400151611ae09190612bdc565b611e98565b9695505050505050565b600081600003611afd574291505b60055460006006826c01431e0fae6d7217caa00000008110611b2157611b21612abf565b600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050611b648185611e98565b949350505050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610a1960008383612195565b6006816c01431e0fae6d7217caa00000008110611bbc57600080fd5b60040201805460018201546002830154600390930154919350919084565b6001600160a01b03821660009081526c050c783eb9b5c85f2a800000066020526040812082633b9aca008110611c1257611c12612abf565b6004020160020154905092915050565b611c2a611f80565b611c33336127e2565b33600090815260046020908152604091829020825180840190935280548352600101549082018190524210611caa5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b20657870697265640000000000000000000000000000000000000000604482015260640161091f565b8051600012611cfb5760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b6564000000000000000000000000000000604482015260640161091f565b600082118015611d0f5750630784ce008211155b611da75760405162461bcd60e51b815260206004820152604160248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e2060448201527f6f7220566f74696e67206c6f636b2063616e2062652034207965617273206d6160648201527f7800000000000000000000000000000000000000000000000000000000000000608482015260a40161091f565b6020810151611db64284612bdc565b11611e035760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e00604482015260640161091f565b62093a80808304024201915080602001518211611e885760405162461bcd60e51b815260206004820152603560248201527f556e6c6f636b2074696d65206d7573742062652067726561746572207468616e60448201527f207468652063757272656e7420656e642074696d650000000000000000000000606482015260840161091f565b610dba3333600085856003611fc3565b600080839050600062093a8080836040015181611eb757611eb7612bc6565b0402905060005b60ff811015611f6757611ed462093a8083612bdc565b9150600085831115611ee857859250611f05565b5060008281526c050c783eb9b5c85f2a8000000860205260409020545b6040840151611f149084612aeb565b8460200151611f239190612afe565b84518590611f32908390612b4a565b905250858303611f425750611f67565b8084602001818151611f549190612c45565b9052505060408301829052600101611ebe565b50815160001315611f7757600082525b50519392505050565b600260005403611fbc576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6040805180820182528351815260208085018051828401528351808501909452855184525190830152600354909190611ffc8782612bdc565b600355825161200c908890612c45565b8352851561201c57602083018690525b6001600160a01b03881660009081526004602090815260409091208451815590840151600190910155612050888385612195565b86156120f5576001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152306024830152604482018a9052909116906323b872dd906064016020604051808303816000875af11580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec9190612ba4565b6120f557600080fd5b602080840151604080518a81529283018790524290830152906001600160a01b038a16907f25a2cd6979bf1e8caf0d1ced1c5b3b70e9870bc562e6cfd5c551d71e24fb19ea9060600160405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c816121728982612bdc565b6040805192835260208301919091520160405180910390a1505050505050505050565b6121c06040518060800160405280600081526020016000815260200160008152602001600081525090565b6121eb6040518060800160405280600081526020016000815260200160008152602001600081525090565b60055460009081906001600160a01b038816156122ff57428760200151118015612216575086516000125b1561224d578651630784ce00900560208087019190915287015161223b904290612aeb565b856020015161224a9190612afe565b85525b428660200151118015612261575085516000125b15612298578551630784ce009005602080860191909152860151612286904290612aeb565b84602001516122959190612afe565b84525b60208088015160009081526c050c783eb9b5c85f2a800000088252604090205490870151909350156122ff5786602001518660200151036122db578291506122ff565b60208087015160009081526c050c783eb9b5c85f2a80000008909152604090205491505b604080516080810182526000808252602082015242918101919091524360608201528115612380576006826c01431e0fae6d7217caa0000000811061234657612346612abf565b6004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090505b6040810151816000428310156123cd57604084015161239f9042612aeb565b60608501516123ae9043612aeb565b6123c090670de0b6b3a7640000612bef565b6123ca9190612c06565b90505b62093a808084040260005b60ff811015612545576123ee62093a8083612bdc565b91506000428311156124025742925061241f565b5060008281526c050c783eb9b5c85f2a8000000860205260409020545b6124298684612aeb565b87602001516124389190612afe565b87516124449190612b4a565b875260208701805182919061245a908390612c45565b90525086516000131561246c57600087525b60008760200151121561248157600060208801525b60408088018490528501519295508592670de0b6b3a7640000906124a59085612aeb565b6124af9086612bef565b6124b99190612c06565b85606001516124c89190612bdc565b60608801526124d8600189612bdc565b97504283036124ed5750436060870152612545565b866006896c01431e0fae6d7217caa0000000811061250d5761250d612abf565b6004020160008201518160000155602082015181600101556040820151816002015560608201518160030155905050506001016123d8565b5060058690556001600160a01b038d16156125c6578960200151896020015161256e9190612b4a565b8560200181815161257f9190612c45565b905250895189516125909190612b4a565b8551869061259f908390612c45565b9052506020850151600013156125b757600060208601525b8451600013156125c657600085525b846006876c01431e0fae6d7217caa000000081106125e6576125e6612abf565b82516004919091029190910190815560208201516001820155604082015160028201556060909101516003909101558c6001600160a01b038116156127d257428d6020015111156126875760208b0151612640908a612c45565b98508c602001518c60200151036126635760208a0151612660908a612b4a565b98505b6020808e015160009081526c050c783eb9b5c85f2a80000008909152604090208990555b428c6020015111156126d8578c602001518c6020015111156126d85760208a01516126b29089612b4a565b6020808e015160009081526c050c783eb9b5c85f2a800000089091526040902081905597505b60006c050c783eb9b5c85f2a800000076000836001600160a01b03166001600160a01b03168152602001908152602001600020546001019050806c050c783eb9b5c85f2a800000076000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550428b6040018181525050438b60600181815250508a6c050c783eb9b5c85f2a800000066000846001600160a01b03166001600160a01b0316815260200190815260200160002082633b9aca0081106127a1576127a1612abf565b6004020160008201518160000155602082015181600101556040820151816002015560608201518160030155905050505b5050505050505050505050505050565b6001600160a01b0381163214610dc5576c050c783eb9b5c85f2a8000000e546001600160a01b0316801561289e576040517fc23697a80000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015282169063c23697a8906024016020604051808303816000875af1158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190612ba4565b1561289e575050565b60405162461bcd60e51b815260206004820152601f60248201527f636f6e7472616374206465706f7369746f7273206e6f7420616c6c6f77656400604482015260640161091f565b60008082815b6080811161294a578183101561294a57600282840160010104866006826c01431e0fae6d7217caa0000000811061292557612925612abf565b60040201600301541161293a57809350612941565b6001810392505b506001016128ec565b5090949350505050565b6001600160a01b0381168114610dc557600080fd5b6000806040838503121561297c57600080fd5b823561298781612954565b946020939093013593505050565b6000602082840312156129a757600080fd5b81356129b281612954565b9392505050565b60006020808352835180602085015260005b818110156129e7578581018301518582016040015282016129cb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060208284031215612a3857600080fd5b5035919050565b60008060408385031215612a5257600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215612a7e57600080fd5b8835612a8981612954565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561077257610772612ad5565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615612b3657612b36612ad5565b818105831482151761077257610772612ad5565b818103600083128015838313168383128216171561077057610770612ad5565b600181811c90821680612b7e57607f821691505b602082108103612b9e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612bb657600080fd5b815180151581146129b257600080fd5b634e487b7160e01b600052601260045260246000fd5b8082018082111561077257610772612ad5565b808202811582820484141761077257610772612ad5565b600082612c2357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612c3a57600080fd5b81516129b281612954565b8082018281126000831280158216821582161715612c6557612c65612ad5565b50509291505056fea264697066735822122005a2a87cf46d693d6af623dda2d3ee6d306683c17f855225ad58e7815aa9ac8964736f6c63430008170033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2371,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2750,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2752,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "migrater",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2754,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(LockedBalance)2666_storage)"
      },
      {
        "astId": 2761,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2766,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "point_history",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Point)2661_storage)100000000000000000000000000000_storage"
      },
      {
        "astId": 2773,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "user_point_history",
        "offset": 0,
        "slot": "400000000000000000000000000006",
        "type": "t_mapping(t_address,t_array(t_struct(Point)2661_storage)1000000000_storage)"
      },
      {
        "astId": 2777,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "user_point_epoch",
        "offset": 0,
        "slot": "400000000000000000000000000007",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2781,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "slope_changes",
        "offset": 0,
        "slot": "400000000000000000000000000008",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 2783,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "controller",
        "offset": 0,
        "slot": "400000000000000000000000000009",
        "type": "t_address"
      },
      {
        "astId": 2785,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "transfersEnabled",
        "offset": 20,
        "slot": "400000000000000000000000000009",
        "type": "t_bool"
      },
      {
        "astId": 2787,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "400000000000000000000000000010",
        "type": "t_string_storage"
      },
      {
        "astId": 2789,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "400000000000000000000000000011",
        "type": "t_string_storage"
      },
      {
        "astId": 2791,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "version",
        "offset": 0,
        "slot": "400000000000000000000000000012",
        "type": "t_string_storage"
      },
      {
        "astId": 2796,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "future_smart_wallet_checker",
        "offset": 0,
        "slot": "400000000000000000000000000013",
        "type": "t_address"
      },
      {
        "astId": 2798,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "smart_wallet_checker",
        "offset": 0,
        "slot": "400000000000000000000000000014",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)2661_storage)100000000000000000000000000000_storage": {
        "base": "t_struct(Point)2661_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[100000000000000000000000000000]",
        "numberOfBytes": "12800000000000000000000000000000"
      },
      "t_array(t_struct(Point)2661_storage)1000000000_storage": {
        "base": "t_struct(Point)2661_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[1000000000]",
        "numberOfBytes": "128000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Point)2661_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)2661_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_struct(LockedBalance)2666_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)2666_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)2666_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 2663,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2665,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)2661_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 2654,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2656,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 2658,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2660,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}